{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/1/פרויקטים/AIDrawer/client/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}