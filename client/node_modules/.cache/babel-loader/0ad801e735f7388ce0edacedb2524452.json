{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\AIDrawer\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction renderShape(shape, i) {\n  const {\n    type,\n    x,\n    y,\n    width,\n    height,\n    color\n  } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 14\n      }, this);\n    case \"Square\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: width,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 14\n      }, this);\n    case \"Circle\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + width / 2,\n        rx: width / 2,\n        ry: width / 2,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this);\n    case \"Ellipse\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + height / 2,\n        rx: width / 2,\n        ry: height / 2,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this);\n    case \"Line\":\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + width,\n        y2: y + height,\n        stroke: color,\n        strokeWidth: \"3\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 14\n      }, this);\n    case \"Triangle\":\n      return /*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: `\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this);\n    default:\n      return null;\n  }\n}\nexport default function App() {\n  _s();\n  var _canvases$selectedCan;\n  const [canvases, setCanvases] = useState([{\n    id: null,\n    name: \"קנבס ראשי\",\n    drawings: [{\n      description: \"ציור ראשון\",\n      shapes: [],\n      undoStack: [[]],\n      redoStack: []\n    }]\n  }]);\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n  const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n\n  // General states\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n\n  // Helper function to update a specific drawing's state\n  const updateDrawingState = (canvasIdx, drawingIdx, newShapes, shouldPushToUndo = true) => {\n    setCanvases(prevCanvases => {\n      const newCanvases = [...prevCanvases];\n      const targetCanvas = {\n        ...newCanvases[canvasIdx]\n      };\n      const targetDrawing = {\n        ...targetCanvas.drawings[drawingIdx]\n      };\n\n      // Push current shapes to undoStack if necessary\n      if (shouldPushToUndo && JSON.stringify(targetDrawing.shapes) !== JSON.stringify(newShapes)) {\n        targetDrawing.undoStack = [...targetDrawing.undoStack, targetDrawing.shapes];\n        // Clear redoStack on new action\n        targetDrawing.redoStack = [];\n      }\n      targetDrawing.shapes = newShapes;\n      targetCanvas.drawings[drawingIdx] = targetDrawing;\n      newCanvases[canvasIdx] = targetCanvas;\n      return newCanvases;\n    });\n  };\n  const currentDrawing = canvases[selectedCanvasIdx].drawings[selectedDrawingIdx];\n  const currentUndoStack = (currentDrawing === null || currentDrawing === void 0 ? void 0 : currentDrawing.undoStack) || [[]];\n  const currentRedoStack = (currentDrawing === null || currentDrawing === void 0 ? void 0 : currentDrawing.redoStack) || [];\n  function handleClearDrawing() {\n    updateDrawingState(selectedCanvasIdx, selectedDrawingIdx, []);\n  }\n  function handleUndo() {\n    if (currentUndoStack.length <= 1) return;\n    setCanvases(prevCanvases => {\n      const newCanvases = [...prevCanvases];\n      const targetCanvas = {\n        ...newCanvases[selectedCanvasIdx]\n      };\n      const targetDrawing = {\n        ...targetCanvas.drawings[selectedDrawingIdx]\n      };\n      const prevShapes = targetDrawing.undoStack[targetDrawing.undoStack.length - 1];\n      const newUndoStack = targetDrawing.undoStack.slice(0, -1);\n      const newRedoStack = [targetDrawing.shapes, ...targetDrawing.redoStack];\n      targetDrawing.shapes = prevShapes;\n      targetDrawing.undoStack = newUndoStack;\n      targetDrawing.redoStack = newRedoStack;\n      targetCanvas.drawings[selectedDrawingIdx] = targetDrawing;\n      newCanvases[selectedCanvasIdx] = targetCanvas;\n      return newCanvases;\n    });\n  }\n  function handleRedo() {\n    if (currentRedoStack.length === 0) return;\n    setCanvases(prevCanvases => {\n      const newCanvases = [...prevCanvases];\n      const targetCanvas = {\n        ...newCanvases[selectedCanvasIdx]\n      };\n      const targetDrawing = {\n        ...targetCanvas.drawings[selectedDrawingIdx]\n      };\n      const [nextShapes, ...restRedo] = targetDrawing.redoStack;\n      const newUndoStack = [...targetDrawing.undoStack, targetDrawing.shapes];\n      const newRedoStack = restRedo;\n      targetDrawing.shapes = nextShapes;\n      targetDrawing.undoStack = newUndoStack;\n      targetDrawing.redoStack = newRedoStack;\n      targetCanvas.drawings[selectedDrawingIdx] = targetDrawing;\n      newCanvases[selectedCanvasIdx] = targetCanvas;\n      return newCanvases;\n    });\n  }\n\n  // Open save dialog\n  function handleSave() {\n    setCanvasName(\"\");\n    setShowSaveDialog(true);\n  }\n\n  // Save canvas to server (receives ID from server)\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: canvasName,\n          // When saving, we only need the final shapes, not the undo/redo stacks\n          drawings: canvases[selectedCanvasIdx].drawings.map(({\n            description,\n            shapes\n          }) => ({\n            description,\n            shapes\n          }))\n        })\n      });\n      if (response.ok) {\n        const saved = await response.json();\n        setCanvases(prev => {\n          const newCanvases = [...prev];\n          // Update the current canvas with the new ID and name if it was the initial \"main canvas\"\n          // Or add as a new canvas if it was a new unsaved one\n          if (newCanvases[selectedCanvasIdx].id === null) {\n            newCanvases[selectedCanvasIdx] = {\n              ...newCanvases[selectedCanvasIdx],\n              id: saved.id,\n              name: saved.name\n            };\n          } else {\n            // This part might need refinement depending on how you want to handle \"saving an existing canvas\"\n            // For now, let's assume we save the currently selected canvas\n            newCanvases[selectedCanvasIdx] = {\n              ...newCanvases[selectedCanvasIdx],\n              id: saved.id,\n              // Update ID if it was an unsaved canvas\n              name: saved.name\n            };\n          }\n          return newCanvases;\n        });\n        alert(\"הקנבס נשמר בהצלחה!\");\n      } else {\n        alert(\"שגיאה בשמירת הקנבס\");\n      }\n    } catch (err) {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n    setSelectedDrawingIdx(0); // Reset to first drawing when switching canvas\n\n    const canvas = canvases[idx];\n    if (canvas.id === null) {\n      // If it's the initial \"main canvas\" without an ID, just use its local data\n      // The drawings state is already part of the canvas object\n      return;\n    }\n    try {\n      const res = await fetch(`/api/drawings/get/${canvas.id}`);\n      if (res.ok) {\n        const data = await res.json();\n        // When loading from server, initialize undo/redo stacks for each drawing\n        const loadedDrawings = data.drawings.map(drawing => ({\n          ...drawing,\n          undoStack: [drawing.shapes],\n          // Initial state\n          redoStack: []\n        }));\n        setCanvases(prev => {\n          const newCanvases = [...prev];\n          newCanvases[idx] = {\n            ...newCanvases[idx],\n            drawings: loadedDrawings\n          };\n          return newCanvases;\n        });\n      } else {\n        alert(\"שגיאה בטעינת הקנבס\");\n      }\n    } catch {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  // Send message to server\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, {\n      from: \"user\",\n      text: prompt\n    }]);\n    setLoading(true);\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: canvases[selectedCanvasIdx].drawings\n        })\n      });\n      if (!response.ok) {\n        setMessages(msgs => [...msgs, {\n          from: \"bot\",\n          text: \"שגיאה בשליחת הבקשה לשרת\"\n        }]);\n        setLoading(false);\n        return;\n      }\n      const newShapes = await response.json();\n      setCanvases(prevCanvases => {\n        const newCanvases = [...prevCanvases];\n        const targetCanvas = {\n          ...newCanvases[selectedCanvasIdx]\n        };\n        const updatedDrawings = [...targetCanvas.drawings];\n        const newDrawing = {\n          description: prompt,\n          shapes: newShapes,\n          undoStack: [newShapes],\n          // Initial state for the new drawing\n          redoStack: []\n        };\n        updatedDrawings.push(newDrawing);\n        targetCanvas.drawings = updatedDrawings;\n        newCanvases[selectedCanvasIdx] = targetCanvas;\n        setSelectedDrawingIdx(updatedDrawings.length - 1); // Select the newly added drawing\n\n        return newCanvases;\n      });\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"הציור התעדכן בהצלחה!\"\n      }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"שגיאה בתקשורת עם השרת\"\n      }]);\n    }\n    setLoading(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCanvasIdx,\n        onChange: e => handleSelectCanvas(Number(e.target.value)),\n        children: canvases.map((canvas, idx) => {\n          var _canvas$id;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: idx,\n            children: canvas.name\n          }, (_canvas$id = canvas.id) !== null && _canvas$id !== void 0 ? _canvas$id : `canvas-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn orange\",\n        onClick: handleUndo,\n        disabled: currentUndoStack.length <= 1,\n        children: \"\\u05D0\\u05E0\\u05D3\\u05D5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn purple\",\n        onClick: handleRedo,\n        disabled: currentRedoStack.length === 0,\n        children: \"\\u05E8\\u05D3\\u05D5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn red\",\n        onClick: handleClearDrawing,\n        children: \"\\u05E0\\u05D9\\u05E7\\u05D5\\u05D9 \\u05DC\\u05D5\\u05D7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn green\",\n        onClick: handleSave,\n        children: \"\\u05E1\\u05D9\\u05D9\\u05D1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: \"\\u05D4\\u05D9\\u05E1\\u05D8\\u05D5\\u05E8\\u05D9\\u05D9\\u05EA \\u05E9\\u05D9\\u05D7\\u05D4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-msg ${msg.from}`,\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: msg.from === \"user\" ? \"אתה:\" : \"בוט:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 17\n            }, this), \" \", msg.text]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prompt,\n            onChange: e => setPrompt(e.target.value),\n            placeholder: \"\\u05DB\\u05EA\\u05D5\\u05D1 \\u05D4\\u05D5\\u05D3\\u05E2\\u05D4 \\u05DC\\u05D1\\u05D5\\u05D8...\",\n            disabled: loading,\n            onKeyDown: e => e.key === \"Enter\" && handleSend()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSend,\n            disabled: loading || !prompt.trim(),\n            children: \"\\u05E9\\u05DC\\u05D7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"drawing-selector\",\n          children: canvases[selectedCanvasIdx].drawings.map((drawing, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `drawing-btn ${idx === selectedDrawingIdx ? \"active\" : \"\"}`,\n            onClick: () => setSelectedDrawingIdx(idx),\n            children: drawing.description || `ציור ${idx + 1}`\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 11\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u05DE\\u05E6\\u05D9\\u05D9\\u05E8 \\u05DC\\u05DA...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"600\",\n          height: \"400\",\n          className: \"drawing-canvas\",\n          children: (_canvases$selectedCan = canvases[selectedCanvasIdx].drawings[selectedDrawingIdx]) === null || _canvases$selectedCan === void 0 ? void 0 : _canvases$selectedCan.shapes.map((shape, i) => renderShape(shape, i))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 746,\n      columnNumber: 7\n    }, this), showSaveDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"rgba(0,0,0,0.3)\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: \"#fff\",\n          padding: 30,\n          borderRadius: 10,\n          boxShadow: \"0 2px 12px #0002\",\n          minWidth: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 10,\n            fontWeight: \"bold\"\n          },\n          children: \"\\u05E9\\u05DD \\u05D4\\u05E7\\u05E0\\u05D1\\u05E1:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: canvasName,\n          onChange: e => setCanvasName(e.target.value),\n          placeholder: \"\\u05D4\\u05DB\\u05E0\\u05E1 \\u05E9\\u05DD \\u05DC\\u05E7\\u05E0\\u05D1\\u05E1\",\n          style: {\n            width: \"100%\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            marginBottom: 16\n          },\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10,\n            justifyContent: \"flex-end\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn green\",\n            onClick: handleSaveCanvas,\n            disabled: !canvasName.trim(),\n            children: \"\\u05E9\\u05DE\\u05D5\\u05E8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn orange\",\n            onClick: () => setShowSaveDialog(false),\n            children: \"\\u05D1\\u05D9\\u05D8\\u05D5\\u05DC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 713,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+a1uI0CxClYEYz+nReUGpnWPpkw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","renderShape","shape","i","type","x","y","width","height","color","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","rx","ry","x1","y1","x2","y2","strokeWidth","points","App","_s","_canvases$selectedCan","canvases","setCanvases","id","name","drawings","description","shapes","undoStack","redoStack","selectedCanvasIdx","setSelectedCanvasIdx","selectedDrawingIdx","setSelectedDrawingIdx","prompt","setPrompt","loading","setLoading","messages","setMessages","showSaveDialog","setShowSaveDialog","canvasName","setCanvasName","updateDrawingState","canvasIdx","drawingIdx","newShapes","shouldPushToUndo","prevCanvases","newCanvases","targetCanvas","targetDrawing","JSON","stringify","currentDrawing","currentUndoStack","currentRedoStack","handleClearDrawing","handleUndo","length","prevShapes","newUndoStack","slice","newRedoStack","handleRedo","nextShapes","restRedo","handleSave","handleSaveCanvas","trim","response","fetch","method","headers","body","title","map","ok","saved","json","prev","alert","err","handleSelectCanvas","idx","canvas","res","data","loadedDrawings","drawing","handleSend","from","text","existingDrawings","msgs","updatedDrawings","newDrawing","push","className","children","value","onChange","e","Number","target","_canvas$id","onClick","disabled","msg","placeholder","onKeyDown","key","style","position","top","left","background","display","alignItems","justifyContent","zIndex","padding","borderRadius","boxShadow","minWidth","marginBottom","fontWeight","border","autoFocus","gap","_c","$RefreshReg$"],"sources":["C:/Users/1/פרויקטים/AIDrawer/client/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction renderShape(shape, i) {\n  const { type, x, y, width, height, color } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n    case \"Square\":\n      return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n    case \"Circle\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + width / 2}\n          rx={width / 2}\n          ry={width / 2}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    case \"Ellipse\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + height / 2}\n          rx={width / 2}\n          ry={height / 2}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    case \"Line\":\n      return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n    case \"Triangle\":\n      return (\n        <polygon\n          key={i}\n          points={`\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    default:\n      return null;\n  }\n}\n\nexport default function App() {\n  const [canvases, setCanvases] = useState([\n    {\n      id: null,\n      name: \"קנבס ראשי\",\n      drawings: [{ description: \"ציור ראשון\", shapes: [], undoStack: [[]], redoStack: [] }],\n    },\n  ]);\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n  const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n\n  // General states\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n\n  // Helper function to update a specific drawing's state\n  const updateDrawingState = (canvasIdx, drawingIdx, newShapes, shouldPushToUndo = true) => {\n    setCanvases((prevCanvases) => {\n      const newCanvases = [...prevCanvases];\n      const targetCanvas = { ...newCanvases[canvasIdx] };\n      const targetDrawing = { ...targetCanvas.drawings[drawingIdx] };\n\n      // Push current shapes to undoStack if necessary\n      if (shouldPushToUndo && JSON.stringify(targetDrawing.shapes) !== JSON.stringify(newShapes)) {\n        targetDrawing.undoStack = [...targetDrawing.undoStack, targetDrawing.shapes];\n        // Clear redoStack on new action\n        targetDrawing.redoStack = [];\n      }\n      targetDrawing.shapes = newShapes;\n\n      targetCanvas.drawings[drawingIdx] = targetDrawing;\n      newCanvases[canvasIdx] = targetCanvas;\n      return newCanvases;\n    });\n  };\n\n  const currentDrawing = canvases[selectedCanvasIdx].drawings[selectedDrawingIdx];\n  const currentUndoStack = currentDrawing?.undoStack || [[]];\n  const currentRedoStack = currentDrawing?.redoStack || [];\n\n  function handleClearDrawing() {\n    updateDrawingState(selectedCanvasIdx, selectedDrawingIdx, []);\n  }\n\n  function handleUndo() {\n    if (currentUndoStack.length <= 1) return;\n\n    setCanvases((prevCanvases) => {\n      const newCanvases = [...prevCanvases];\n      const targetCanvas = { ...newCanvases[selectedCanvasIdx] };\n      const targetDrawing = { ...targetCanvas.drawings[selectedDrawingIdx] };\n\n      const prevShapes = targetDrawing.undoStack[targetDrawing.undoStack.length - 1];\n      const newUndoStack = targetDrawing.undoStack.slice(0, -1);\n      const newRedoStack = [targetDrawing.shapes, ...targetDrawing.redoStack];\n\n      targetDrawing.shapes = prevShapes;\n      targetDrawing.undoStack = newUndoStack;\n      targetDrawing.redoStack = newRedoStack;\n\n      targetCanvas.drawings[selectedDrawingIdx] = targetDrawing;\n      newCanvases[selectedCanvasIdx] = targetCanvas;\n      return newCanvases;\n    });\n  }\n\n  function handleRedo() {\n    if (currentRedoStack.length === 0) return;\n\n    setCanvases((prevCanvases) => {\n      const newCanvases = [...prevCanvases];\n      const targetCanvas = { ...newCanvases[selectedCanvasIdx] };\n      const targetDrawing = { ...targetCanvas.drawings[selectedDrawingIdx] };\n\n      const [nextShapes, ...restRedo] = targetDrawing.redoStack;\n      const newUndoStack = [...targetDrawing.undoStack, targetDrawing.shapes];\n      const newRedoStack = restRedo;\n\n      targetDrawing.shapes = nextShapes;\n      targetDrawing.undoStack = newUndoStack;\n      targetDrawing.redoStack = newRedoStack;\n\n      targetCanvas.drawings[selectedDrawingIdx] = targetDrawing;\n      newCanvases[selectedCanvasIdx] = targetCanvas;\n      return newCanvases;\n    });\n  }\n\n  // Open save dialog\n  function handleSave() {\n    setCanvasName(\"\");\n    setShowSaveDialog(true);\n  }\n\n  // Save canvas to server (receives ID from server)\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          title: canvasName,\n          // When saving, we only need the final shapes, not the undo/redo stacks\n          drawings: canvases[selectedCanvasIdx].drawings.map(({ description, shapes }) => ({\n            description,\n            shapes,\n          })),\n        }),\n      });\n\n      if (response.ok) {\n        const saved = await response.json();\n        setCanvases((prev) => {\n          const newCanvases = [...prev];\n          // Update the current canvas with the new ID and name if it was the initial \"main canvas\"\n          // Or add as a new canvas if it was a new unsaved one\n          if (newCanvases[selectedCanvasIdx].id === null) {\n            newCanvases[selectedCanvasIdx] = {\n              ...newCanvases[selectedCanvasIdx],\n              id: saved.id,\n              name: saved.name,\n            };\n          } else {\n            // This part might need refinement depending on how you want to handle \"saving an existing canvas\"\n            // For now, let's assume we save the currently selected canvas\n            newCanvases[selectedCanvasIdx] = {\n              ...newCanvases[selectedCanvasIdx],\n              id: saved.id, // Update ID if it was an unsaved canvas\n              name: saved.name,\n            };\n          }\n          return newCanvases;\n        });\n        alert(\"הקנבס נשמר בהצלחה!\");\n      } else {\n        alert(\"שגיאה בשמירת הקנבס\");\n      }\n    } catch (err) {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n    setSelectedDrawingIdx(0); // Reset to first drawing when switching canvas\n\n    const canvas = canvases[idx];\n    if (canvas.id === null) {\n      // If it's the initial \"main canvas\" without an ID, just use its local data\n      // The drawings state is already part of the canvas object\n      return;\n    }\n\n    try {\n      const res = await fetch(`/api/drawings/get/${canvas.id}`);\n      if (res.ok) {\n        const data = await res.json();\n        // When loading from server, initialize undo/redo stacks for each drawing\n        const loadedDrawings = data.drawings.map((drawing) => ({\n          ...drawing,\n          undoStack: [drawing.shapes], // Initial state\n          redoStack: [],\n        }));\n        setCanvases((prev) => {\n          const newCanvases = [...prev];\n          newCanvases[idx] = { ...newCanvases[idx], drawings: loadedDrawings };\n          return newCanvases;\n        });\n      } else {\n        alert(\"שגיאה בטעינת הקנבס\");\n      }\n    } catch {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  // Send message to server\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, { from: \"user\", text: prompt }]);\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: canvases[selectedCanvasIdx].drawings,\n        }),\n      });\n\n      if (!response.ok) {\n        setMessages((msgs) => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n        setLoading(false);\n        return;\n      }\n\n      const newShapes = await response.json();\n\n      setCanvases((prevCanvases) => {\n        const newCanvases = [...prevCanvases];\n        const targetCanvas = { ...newCanvases[selectedCanvasIdx] };\n        const updatedDrawings = [...targetCanvas.drawings];\n\n        const newDrawing = {\n          description: prompt,\n          shapes: newShapes,\n          undoStack: [newShapes], // Initial state for the new drawing\n          redoStack: [],\n        };\n        updatedDrawings.push(newDrawing);\n\n        targetCanvas.drawings = updatedDrawings;\n        newCanvases[selectedCanvasIdx] = targetCanvas;\n\n        setSelectedDrawingIdx(updatedDrawings.length - 1); // Select the newly added drawing\n\n        return newCanvases;\n      });\n\n      setMessages((msgs) => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages((msgs) => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n    }\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"toolbar\">\n        {/* בחירת קנבס אחד בלבד */}\n        <select value={selectedCanvasIdx} onChange={(e) => handleSelectCanvas(Number(e.target.value))}>\n          {canvases.map((canvas, idx) => (\n            <option key={canvas.id ?? `canvas-${idx}`} value={idx}>\n              {canvas.name}\n            </option>\n          ))}\n        </select>\n        <button\n          className=\"toolbar-btn orange\"\n          onClick={handleUndo}\n          disabled={currentUndoStack.length <= 1}\n        >\n          אנדו\n        </button>\n        <button\n          className=\"toolbar-btn purple\"\n          onClick={handleRedo}\n          disabled={currentRedoStack.length === 0}\n        >\n          רדו\n        </button>\n        {/* כפתור ניקוי ציור */}\n        <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>\n          ניקוי לוח\n        </button>\n\n        <button className=\"toolbar-btn green\" onClick={handleSave}>\n          סייב\n        </button>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"chat-section\">\n          <div className=\"chat-title\">היסטוריית שיחה</div>\n          <div className=\"chat-messages\">\n            {messages.map((msg, i) => (\n              <div key={i} className={`chat-msg ${msg.from}`}>\n                <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-input-row\">\n            <input\n              type=\"text\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              placeholder=\"כתוב הודעה לבוט...\"\n              disabled={loading}\n              onKeyDown={(e) => e.key === \"Enter\" && handleSend()}\n            />\n            <button onClick={handleSend} disabled={loading || !prompt.trim()}>\n              שלח\n            </button>\n          </div>\n        </div>\n        <div className=\"canvas-section\">\n          <div className=\"drawing-selector\">\n            {canvases[selectedCanvasIdx].drawings.map((drawing, idx) => (\n              <button\n                key={idx}\n                className={`drawing-btn ${idx === selectedDrawingIdx ? \"active\" : \"\"}`}\n                onClick={() => setSelectedDrawingIdx(idx)}\n              >\n                {drawing.description || `ציור ${idx + 1}`}\n              </button>\n            ))}\n          </div>\n          {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n          <svg width=\"600\" height=\"400\" className=\"drawing-canvas\">\n            {canvases[selectedCanvasIdx].drawings[selectedDrawingIdx]?.shapes.map((shape, i) =>\n              renderShape(shape, i)\n            )}\n          </svg>\n        </div>\n      </div>\n\n      {/* דיאלוג שמירה */}\n      {showSaveDialog && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            width: \"100vw\",\n            height: \"100vh\",\n            background: \"rgba(0,0,0,0.3)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            zIndex: 1000,\n          }}\n        >\n          <div\n            style={{\n              background: \"#fff\",\n              padding: 30,\n              borderRadius: 10,\n              boxShadow: \"0 2px 12px #0002\",\n              minWidth: 300,\n            }}\n          >\n            <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n            <input\n              type=\"text\"\n              value={canvasName}\n              onChange={(e) => setCanvasName(e.target.value)}\n              placeholder=\"הכנס שם לקנבס\"\n              style={{\n                width: \"100%\",\n                padding: 8,\n                borderRadius: 6,\n                border: \"1px solid #ccc\",\n                marginBottom: 16,\n              }}\n              autoFocus\n            />\n            <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n              <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>\n                שמור\n              </button>\n              <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>\n                ביטול\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,WAAWA,CAACC,KAAK,EAAEC,CAAC,EAAE;EAC7B,MAAM;IAAEC,IAAI;IAAEC,CAAC;IAAEC,CAAC;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGP,KAAK;EAClD,QAAQE,IAAI;IACV,KAAK,WAAW;MACd,oBAAOJ,OAAA;QAAcK,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEA,CAAE;QAACC,KAAK,EAAEA,KAAM;QAACC,MAAM,EAAEA,MAAO;QAACE,IAAI,EAAED,KAAM;QAACE,MAAM,EAAC;MAAM,GAAvER,CAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA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","ignoreList":[]},"metadata":{},"sourceType":"module"}