{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\AIDrawer\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction renderShape(shape, i) {\n  const {\n    type,\n    x,\n    y,\n    width,\n    height,\n    color\n  } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 14\n      }, this);\n    case \"Square\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: width,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 14\n      }, this);\n    case \"Circle\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + width / 2,\n        rx: width / 2,\n        ry: width / 2,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this);\n    case \"Ellipse\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + height / 2,\n        rx: width / 2,\n        ry: height / 2,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this);\n    case \"Line\":\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + width,\n        y2: y + height,\n        stroke: color,\n        strokeWidth: \"3\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 14\n      }, this);\n    case \"Triangle\":\n      return /*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: `\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this);\n    default:\n      return null;\n  }\n}\nexport default function App() {\n  _s();\n  const [canvases, setCanvases] = useState([{\n    id: null,\n    name: \"new canvas\",\n    drawings: []\n  }]);\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n  const [drawings, setDrawings] = useState(canvases[0].drawings);\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n\n  // עדכון סטייטים כאשר מחליפים קנבס\n  // עדכון סטייטים כאשר מחליפים קנבס\n  useEffect(() => {\n    const canvasData = canvases[selectedCanvasIdx];\n\n    // פונקציה אסינכרונית פנימית כדי להשתמש ב-await\n    const loadCanvas = async () => {\n      // אם לקנבס אין ID, הוא חדש או מקומי. טען אותו מה-state.\n      if (!canvasData.id) {\n        setDrawings(canvasData.drawings);\n        setUndoStack([]);\n        setRedoStack([]);\n        setMessages([]);\n      } else {\n        // אם לקנבס יש ID, טען אותו מהשרת\n        try {\n          const res = await fetch(`/api/drawings/${canvasData.id}`);\n          if (res.ok) {\n            const data = await res.json();\n            console.log(\"Loaded canvas data from useEffect:\", data);\n            setDrawings(data.drawings);\n\n            // רק אחרי טעינה מוצלחת, נאפס את המחסניות וההודעות\n            setUndoStack([]);\n            setRedoStack([]);\n            setMessages([]);\n          } else {\n            alert(\"שגיאה בטעינת הקנבס\");\n            // אולי נרצה לחזור לקנבס ריק במקרה של שגיאה\n            setDrawings([]);\n          }\n        } catch (err) {\n          alert(\"שגיאה בתקשורת עם השרת\");\n          setDrawings([]);\n        }\n      }\n    };\n    loadCanvas(); // קריאה לפונקציית הטעינה\n  }, [selectedCanvasIdx, canvases]); // התלות נשארת זהה\n\n  // useEffect(() => {\n  //   const canvasData = canvases[selectedCanvasIdx];\n  //   setDrawings(canvasData.drawings);\n  //   setUndoStack([]);\n  //   setRedoStack([]);\n  //   setMessages([]);\n  // }, [selectedCanvasIdx, canvases]);\n\n  function handleClearDrawing() {\n    setUndoStack(prevUndo => [...prevUndo, drawings]);\n    setRedoStack([]);\n    setDrawings([]);\n  }\n\n  // Undo\n  function handleUndo() {\n    console.log(\"Undo Stack before:\", undoStack);\n    if (undoStack.length === 0) {\n      console.log(\"Cannot undo, undoStack is empty.\");\n      return;\n    }\n    setUndoStack(prevUndo => {\n      const stateToRestore = prevUndo[prevUndo.length - 1];\n      const currentState = drawings;\n      setRedoStack(prevRedo => [currentState, ...prevRedo]);\n      const newUndo = prevUndo.slice(0, -1);\n      setDrawings(stateToRestore);\n      console.log(\"Undo Stack after:\", newUndo);\n      return newUndo;\n    });\n  }\n  function handleRedo() {\n    console.log(\"Redo Stack before:\", redoStack);\n    if (redoStack.length === 0) {\n      console.log(\"Cannot redo, redoStack is empty.\");\n      return;\n    }\n    setRedoStack(prevRedo => {\n      const [stateToRestore, ...restRedo] = prevRedo;\n      const currentState = drawings;\n      setUndoStack(prevUndo => [...prevUndo, currentState]);\n      setDrawings(stateToRestore);\n      console.log(\"Redo Stack after:\", restRedo);\n      return restRedo;\n    });\n  }\n\n  // פתיחת דיאלוג שמירה\n  function handleSave() {\n    setCanvasName(\"\");\n    setShowSaveDialog(true);\n  }\n\n  // שמירת קנבס לשרת (מקבל id מהשרת)\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: canvasName,\n          drawings: drawings\n        })\n      });\n      if (response.ok) {\n        const saved = await response.json();\n        const newSavedCanvas = {\n          id: saved.id,\n          name: saved.name,\n          drawings: drawings\n        };\n        setCanvases(prev => {\n          let updatedCanvases = [...prev];\n          const mainCanvasIdx = prev.findIndex(canvas => canvas.id === null && canvas.name === \"new canvas\");\n\n          // אם הקנבס הנוכחי היה ה\"קנבס ראשי\" ללא ID, נעדכן אותו עם ה-ID והשם החדשים\n          // במקום להוסיף אותו כקנבס חדש.\n          if (selectedCanvasIdx === mainCanvasIdx && newSavedCanvas.id !== null) {\n            updatedCanvases[selectedCanvasIdx] = newSavedCanvas;\n          } else {\n            // אחרת, נוסיף אותו כקנבס חדש לרשימה (זה המקרה של שמירה בשם אחר, או שמירה של קנבס שכבר נטען)\n            updatedCanvases = [...prev, newSavedCanvas];\n          }\n          return updatedCanvases;\n        });\n\n        // **התיקון המרכזי כאן:**\n        // יצירת קנבס חדש וריק ובחירתו כקנבס הפעיל.\n        setCanvases(prev => {\n          const newEmptyCanvas = {\n            id: null,\n            name: \"new canvas\",\n            drawings: []\n          };\n          const updatedCanvases = [...prev, newEmptyCanvas];\n          setSelectedCanvasIdx(updatedCanvases.length - 1); // בחירת הקנבס החדש\n          return updatedCanvases;\n        });\n        alert(\"הקנבס נשמר בהצלחה! עובר לקנבס חדש.\");\n      } else {\n        alert(\"שגיאה בשמירת הקנבס\");\n      }\n    } catch (err) {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: canvasName,\n          drawings: drawings // הציורים הנוכחיים מה-state\n        })\n      });\n      if (response.ok) {\n        const saved = await response.json();\n\n        // נאחד את כל עדכוני המצב לקריאה אחת\n        setCanvases(prevCanvases => {\n          // 1. ניצור את האובייקט של הקנבס החדש שנשמר\n          const newSavedCanvas = {\n            id: saved.id,\n            name: saved.name,\n            drawings: drawings // חשוב לשמור את הציורים כאן\n          };\n          let updatedCanvases = [...prevCanvases];\n          const mainCanvasIdx = prevCanvases.findIndex(c => c.id === null && c.name === \"new canvas\");\n\n          // 2. נעדכן את הרשימה עם הקנבס שנשמר\n          if (selectedCanvasIdx === mainCanvasIdx && newSavedCanvas.id !== null) {\n            // אם שמרנו את ה-\"new canvas\", נחליף אותו בגרסה השמורה\n            updatedCanvases[selectedCanvasIdx] = newSavedCanvas;\n          } else {\n            // אם זו \"שמירה בשם\" או שמירה של קנבס קיים, נוסיף אותו כחדש\n            updatedCanvases.push(newSavedCanvas);\n          }\n\n          // 3. נוסיף קנבס ריק חדש לסוף הרשימה\n          const newEmptyCanvas = {\n            id: null,\n            name: \"new canvas\",\n            drawings: []\n          };\n          updatedCanvases.push(newEmptyCanvas);\n\n          // 4. נעביר את המשתמש לקנבס הריק החדש שיצרנו\n          // האינדקס שלו הוא האיבר האחרון במערך המעודכן\n          setSelectedCanvasIdx(updatedCanvases.length - 1);\n\n          // 5. נחזיר את המערך השלם והמעודכן\n          return updatedCanvases;\n        });\n        alert(\"הקנבס נשמר בהצלחה! עובר לקנבס חדש.\");\n      } else {\n        alert(\"שגיאה בשמירת הקנבס\");\n      }\n    } catch (err) {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  // async function handleSelectCanvas(idx) {\n  //   setSelectedCanvasIdx(idx);\n  //   const canvas = canvases[idx];\n\n  //   if (!canvas.id) {\n  //     setDrawings(canvas.drawings);\n  //     setUndoStack([]);\n  //     setRedoStack([]);\n  //     setMessages([]);\n  //     return;\n  //   }\n\n  //   try {\n  //     const res = await fetch(`/api/drawings/${canvas.id}`);\n  //     if (res.ok) {\n  //       const data = await res.json();\n  //       console.log(\"Loaded canvas data:\", data);\n\n  //       setDrawings(data.drawings);\n  //       setUndoStack([]);\n  //       setRedoStack([]);\n  //       setMessages([]);\n  //     } else {\n  //       alert(\"שגיאה בטעינת הקנבס\");\n  //     }\n  //   } catch {\n  //     alert(\"שגיאה בתקשורת עם השרת\");\n  //   }\n  // }\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n  }\n\n  // שליחת הודעה לשרת\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, {\n      from: \"user\",\n      text: prompt\n    }]);\n    setLoading(true);\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: drawings\n        })\n      });\n      if (!response.ok) {\n        setMessages(msgs => [...msgs, {\n          from: \"bot\",\n          text: \"Error communicating with the server\"\n        }]);\n        setLoading(false);\n        return;\n      }\n      const newShapes = await response.json();\n      setUndoStack(prevUndo => [...prevUndo, drawings]);\n      setRedoStack([]);\n      setDrawings(prev => {\n        const newDrawing = {\n          description: prompt,\n          shapes: newShapes\n        };\n        return [...prev, newDrawing];\n      });\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"Drawing added successfully!\"\n      }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"Error communicating with the server\"\n      }]);\n    }\n    setLoading(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"canvas-select\",\n        value: selectedCanvasIdx,\n        onChange: e => handleSelectCanvas(Number(e.target.value)),\n        children: canvases.map((canvas, idx) => {\n          var _canvas$id;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: idx,\n            children: canvas.name\n          }, (_canvas$id = canvas.id) !== null && _canvas$id !== void 0 ? _canvas$id : idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn orange\",\n        onClick: handleUndo,\n        disabled: undoStack.length === 0,\n        children: \"undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn purple\",\n        onClick: handleRedo,\n        disabled: redoStack.length === 0,\n        children: \"redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn off-white\",\n        onClick: handleClearDrawing,\n        children: \"clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn yellow\",\n        onClick: handleSave,\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: \"chat history\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-msg ${msg.from}`,\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: msg.from === \"user\" ? \"you:\" : \"bot:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 17\n            }, this), \" \", msg.text]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prompt,\n            onChange: e => setPrompt(e.target.value),\n            placeholder: \"write a message...\",\n            disabled: loading,\n            onKeyDown: e => e.key === \"Enter\" && handleSend()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSend,\n            disabled: loading || !prompt.trim(),\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-section\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u05DE\\u05E6\\u05D9\\u05D9\\u05E8 \\u05DC\\u05DA...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 840,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"600\",\n          height: \"400\",\n          children: drawings.flatMap((drawing, dIdx) => drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 817,\n      columnNumber: 7\n    }, this), showSaveDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"rgba(0,0,0,0.3)\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: \"#fff\",\n          padding: 30,\n          borderRadius: 10,\n          boxShadow: \"0 2px 12px #0002\",\n          minWidth: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 10,\n            fontWeight: \"bold\"\n          },\n          children: \"canvas name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: canvasName,\n          onChange: e => setCanvasName(e.target.value),\n          placeholder: \"insert canvas name\",\n          style: {\n            width: \"100%\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            marginBottom: 16\n          },\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10,\n            justifyContent: \"flex-end\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn green\",\n            onClick: handleSaveCanvas,\n            disabled: !canvasName.trim(),\n            children: \"\\u05E9\\u05DE\\u05D5\\u05E8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn orange\",\n            onClick: () => setShowSaveDialog(false),\n            children: \"\\u05D1\\u05D9\\u05D8\\u05D5\\u05DC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 792,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"usk3cy1if6a6aLyTJj4rhjb7aG8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","renderShape","shape","i","type","x","y","width","height","color","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","rx","ry","x1","y1","x2","y2","strokeWidth","points","App","_s","canvases","setCanvases","id","name","drawings","selectedCanvasIdx","setSelectedCanvasIdx","setDrawings","undoStack","setUndoStack","redoStack","setRedoStack","prompt","setPrompt","loading","setLoading","messages","setMessages","showSaveDialog","setShowSaveDialog","canvasName","setCanvasName","canvasData","loadCanvas","res","fetch","ok","data","json","console","log","alert","err","handleClearDrawing","prevUndo","handleUndo","length","stateToRestore","currentState","prevRedo","newUndo","slice","handleRedo","restRedo","handleSave","handleSaveCanvas","trim","response","method","headers","body","JSON","stringify","title","saved","newSavedCanvas","prev","updatedCanvases","mainCanvasIdx","findIndex","canvas","newEmptyCanvas","prevCanvases","c","push","handleSelectCanvas","idx","handleSend","from","text","existingDrawings","msgs","newShapes","newDrawing","description","shapes","className","children","value","onChange","e","Number","target","map","_canvas$id","onClick","disabled","msg","placeholder","onKeyDown","key","flatMap","drawing","dIdx","style","position","top","left","background","display","alignItems","justifyContent","zIndex","padding","borderRadius","boxShadow","minWidth","marginBottom","fontWeight","border","autoFocus","gap","_c","$RefreshReg$"],"sources":["C:/Users/1/פרויקטים/AIDrawer/client/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction renderShape(shape, i) {\n  const { type, x, y, width, height, color } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n    case \"Square\":\n      return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n    case \"Circle\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + width / 2}\n          rx={width / 2}\n          ry={width / 2}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    case \"Ellipse\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + height / 2}\n          rx={width / 2}\n          ry={height / 2}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    case \"Line\":\n      return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n    case \"Triangle\":\n      return (\n        <polygon\n          key={i}\n          points={`\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    default:\n      return null;\n  }\n}\n\nexport default function App() {\n  const [canvases, setCanvases] = useState([\n    { id: null, name: \"new canvas\", drawings: [] }\n  ]);\n\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n  const [drawings, setDrawings] = useState(canvases[0].drawings);\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n\n  // עדכון סטייטים כאשר מחליפים קנבס\n  // עדכון סטייטים כאשר מחליפים קנבס\n  useEffect(() => {\n    const canvasData = canvases[selectedCanvasIdx];\n\n    // פונקציה אסינכרונית פנימית כדי להשתמש ב-await\n    const loadCanvas = async () => {\n      // אם לקנבס אין ID, הוא חדש או מקומי. טען אותו מה-state.\n      if (!canvasData.id) {\n        setDrawings(canvasData.drawings);\n        setUndoStack([]);\n        setRedoStack([]);\n        setMessages([]);\n      } else {\n        // אם לקנבס יש ID, טען אותו מהשרת\n        try {\n          const res = await fetch(`/api/drawings/${canvasData.id}`);\n          if (res.ok) {\n            const data = await res.json();\n            console.log(\"Loaded canvas data from useEffect:\", data);\n            setDrawings(data.drawings);\n\n            // רק אחרי טעינה מוצלחת, נאפס את המחסניות וההודעות\n            setUndoStack([]);\n            setRedoStack([]);\n            setMessages([]);\n          } else {\n            alert(\"שגיאה בטעינת הקנבס\");\n            // אולי נרצה לחזור לקנבס ריק במקרה של שגיאה\n            setDrawings([]);\n          }\n        } catch (err) {\n          alert(\"שגיאה בתקשורת עם השרת\");\n          setDrawings([]);\n        }\n      }\n    };\n\n    loadCanvas(); // קריאה לפונקציית הטעינה\n\n  }, [selectedCanvasIdx, canvases]); // התלות נשארת זהה\n\n  // useEffect(() => {\n  //   const canvasData = canvases[selectedCanvasIdx];\n  //   setDrawings(canvasData.drawings);\n  //   setUndoStack([]);\n  //   setRedoStack([]);\n  //   setMessages([]);\n  // }, [selectedCanvasIdx, canvases]);\n\n  function handleClearDrawing() {\n    setUndoStack(prevUndo => [...prevUndo, drawings]);\n    setRedoStack([]);\n\n    setDrawings([]);\n  }\n\n  // Undo\n  function handleUndo() {\n    console.log(\"Undo Stack before:\", undoStack);\n\n    if (undoStack.length === 0) {\n      console.log(\"Cannot undo, undoStack is empty.\");\n      return;\n    }\n\n    setUndoStack(prevUndo => {\n      const stateToRestore = prevUndo[prevUndo.length - 1];\n      const currentState = drawings;\n\n      setRedoStack(prevRedo => [currentState, ...prevRedo]);\n\n      const newUndo = prevUndo.slice(0, -1);\n\n      setDrawings(stateToRestore);\n\n      console.log(\"Undo Stack after:\", newUndo);\n      return newUndo;\n    });\n  }\n\n  function handleRedo() {\n    console.log(\"Redo Stack before:\", redoStack);\n\n    if (redoStack.length === 0) {\n      console.log(\"Cannot redo, redoStack is empty.\");\n      return;\n    }\n\n    setRedoStack(prevRedo => {\n      const [stateToRestore, ...restRedo] = prevRedo;\n      const currentState = drawings;\n\n      setUndoStack(prevUndo => [...prevUndo, currentState]);\n\n      setDrawings(stateToRestore);\n\n      console.log(\"Redo Stack after:\", restRedo);\n      return restRedo;\n    });\n  }\n\n  // פתיחת דיאלוג שמירה\n  function handleSave() {\n    setCanvasName(\"\");\n    setShowSaveDialog(true);\n  }\n\n  // שמירת קנבס לשרת (מקבל id מהשרת)\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          title: canvasName,\n          drawings: drawings\n        })\n      });\n\n      if (response.ok) {\n        const saved = await response.json();\n        const newSavedCanvas = {\n          id: saved.id,\n          name: saved.name,\n          drawings: drawings,\n        };\n\n        setCanvases(prev => {\n          let updatedCanvases = [...prev];\n          const mainCanvasIdx = prev.findIndex(canvas => canvas.id === null && canvas.name === \"new canvas\");\n\n          // אם הקנבס הנוכחי היה ה\"קנבס ראשי\" ללא ID, נעדכן אותו עם ה-ID והשם החדשים\n          // במקום להוסיף אותו כקנבס חדש.\n          if (selectedCanvasIdx === mainCanvasIdx && newSavedCanvas.id !== null) {\n            updatedCanvases[selectedCanvasIdx] = newSavedCanvas;\n          } else {\n            // אחרת, נוסיף אותו כקנבס חדש לרשימה (זה המקרה של שמירה בשם אחר, או שמירה של קנבס שכבר נטען)\n            updatedCanvases = [...prev, newSavedCanvas];\n          }\n          return updatedCanvases;\n        });\n\n        // **התיקון המרכזי כאן:**\n        // יצירת קנבס חדש וריק ובחירתו כקנבס הפעיל.\n        setCanvases(prev => {\n          const newEmptyCanvas = { id: null, name: \"new canvas\", drawings: [] };\n          const updatedCanvases = [...prev, newEmptyCanvas];\n          setSelectedCanvasIdx(updatedCanvases.length - 1); // בחירת הקנבס החדש\n          return updatedCanvases;\n        });\n\n        alert(\"הקנבס נשמר בהצלחה! עובר לקנבס חדש.\");\n      } else {\n        alert(\"שגיאה בשמירת הקנבס\");\n      }\n    } catch (err) {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  async function handleSaveCanvas() {\n  if (!canvasName.trim()) return;\n  setShowSaveDialog(false);\n  try {\n    const response = await fetch(\"/api/drawings/save-canvas\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        title: canvasName,\n        drawings: drawings // הציורים הנוכחיים מה-state\n      })\n    });\n\n    if (response.ok) {\n      const saved = await response.json();\n      \n      // נאחד את כל עדכוני המצב לקריאה אחת\n      setCanvases(prevCanvases => {\n        // 1. ניצור את האובייקט של הקנבס החדש שנשמר\n        const newSavedCanvas = {\n          id: saved.id,\n          name: saved.name,\n          drawings: drawings, // חשוב לשמור את הציורים כאן\n        };\n\n        let updatedCanvases = [...prevCanvases];\n        const mainCanvasIdx = prevCanvases.findIndex(c => c.id === null && c.name === \"new canvas\");\n\n        // 2. נעדכן את הרשימה עם הקנבס שנשמר\n        if (selectedCanvasIdx === mainCanvasIdx && newSavedCanvas.id !== null) {\n          // אם שמרנו את ה-\"new canvas\", נחליף אותו בגרסה השמורה\n          updatedCanvases[selectedCanvasIdx] = newSavedCanvas;\n        } else {\n          // אם זו \"שמירה בשם\" או שמירה של קנבס קיים, נוסיף אותו כחדש\n          updatedCanvases.push(newSavedCanvas);\n        }\n\n        // 3. נוסיף קנבס ריק חדש לסוף הרשימה\n        const newEmptyCanvas = { id: null, name: \"new canvas\", drawings: [] };\n        updatedCanvases.push(newEmptyCanvas);\n\n        // 4. נעביר את המשתמש לקנבס הריק החדש שיצרנו\n        // האינדקס שלו הוא האיבר האחרון במערך המעודכן\n        setSelectedCanvasIdx(updatedCanvases.length - 1);\n\n        // 5. נחזיר את המערך השלם והמעודכן\n        return updatedCanvases;\n      });\n\n      alert(\"הקנבס נשמר בהצלחה! עובר לקנבס חדש.\");\n    } else {\n      alert(\"שגיאה בשמירת הקנבס\");\n    }\n  } catch (err) {\n    alert(\"שגיאה בתקשורת עם השרת\");\n  }\n}\n\n  // async function handleSelectCanvas(idx) {\n  //   setSelectedCanvasIdx(idx);\n  //   const canvas = canvases[idx];\n\n  //   if (!canvas.id) {\n  //     setDrawings(canvas.drawings);\n  //     setUndoStack([]);\n  //     setRedoStack([]);\n  //     setMessages([]);\n  //     return;\n  //   }\n\n  //   try {\n  //     const res = await fetch(`/api/drawings/${canvas.id}`);\n  //     if (res.ok) {\n  //       const data = await res.json();\n  //       console.log(\"Loaded canvas data:\", data);\n\n  //       setDrawings(data.drawings);\n  //       setUndoStack([]);\n  //       setRedoStack([]);\n  //       setMessages([]);\n  //     } else {\n  //       alert(\"שגיאה בטעינת הקנבס\");\n  //     }\n  //   } catch {\n  //     alert(\"שגיאה בתקשורת עם השרת\");\n  //   }\n  // }\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n  }\n\n  // שליחת הודעה לשרת\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, { from: \"user\", text: prompt }]);\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: drawings\n        })\n      });\n\n      if (!response.ok) {\n        setMessages(msgs => [...msgs, { from: \"bot\", text: \"Error communicating with the server\" }]);\n        setLoading(false);\n        return;\n      }\n\n      const newShapes = await response.json();\n\n      setUndoStack(prevUndo => [...prevUndo, drawings]);\n      setRedoStack([]);\n\n      setDrawings(prev => {\n        const newDrawing = {\n          description: prompt,\n          shapes: newShapes\n        };\n        return [...prev, newDrawing];\n      });\n\n      setMessages(msgs => [...msgs, { from: \"bot\", text: \"Drawing added successfully!\" }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages(msgs => [...msgs, { from: \"bot\", text: \"Error communicating with the server\" }]);\n    }\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"toolbar\">\n\n        <select className=\"canvas-select\" value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n          {canvases.map((canvas, idx) => (\n            <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n          ))}\n        </select>\n        <button\n          className=\"toolbar-btn orange\"\n          onClick={handleUndo}\n          disabled={undoStack.length === 0}\n        >\n          undo\n        </button>\n        <button\n          className=\"toolbar-btn purple\"\n          onClick={handleRedo}\n          disabled={redoStack.length === 0}\n        >\n          redo\n        </button>\n        <button className=\"toolbar-btn off-white\" onClick={handleClearDrawing}>clear</button>\n        <button className=\"toolbar-btn yellow\" onClick={handleSave}>save</button>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"chat-section\">\n          <div className=\"chat-title\">chat history</div>\n          <div className=\"chat-messages\">\n            {messages.map((msg, i) => (\n              <div key={i} className={`chat-msg ${msg.from}`}>\n                <b>{msg.from === \"user\" ? \"you:\" : \"bot:\"}</b> {msg.text}\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-input-row\">\n            <input\n              type=\"text\"\n              value={prompt}\n              onChange={e => setPrompt(e.target.value)}\n              placeholder=\"write a message...\"\n              disabled={loading}\n              onKeyDown={e => e.key === \"Enter\" && handleSend()}\n            />\n            <button onClick={handleSend} disabled={loading || !prompt.trim()}>send</button>\n          </div>\n        </div>\n        <div className=\"canvas-section\">\n          {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n          <svg width=\"600\" height=\"400\">\n            {drawings.flatMap((drawing, dIdx) =>\n              drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n            )}\n          </svg>\n        </div>\n      </div>\n\n      {/* דיאלוג שמירה */}\n      {showSaveDialog && (\n        <div style={{\n          position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n          background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n        }}>\n          <div style={{\n            background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n          }}>\n            <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>canvas name:</div>\n            <input\n              type=\"text\"\n              value={canvasName}\n              onChange={e => setCanvasName(e.target.value)}\n              placeholder=\"insert canvas name\"\n              style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n              autoFocus\n            />\n            <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n              <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n              <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,WAAWA,CAACC,KAAK,EAAEC,CAAC,EAAE;EAC7B,MAAM;IAAEC,IAAI;IAAEC,CAAC;IAAEC,CAAC;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGP,KAAK;EAClD,QAAQE,IAAI;IACV,KAAK,WAAW;MACd,oBAAOJ,OAAA;QAAcK,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEA,CAAE;QAACC,KAAK,EAAEA,KAAM;QAACC,MAAM,EAAEA,MAAO;QAACE,IAAI,EAAED,KAAM;QAACE,MAAM,EAAC;MAAM,GAAvER,CAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA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","ignoreList":[]},"metadata":{},"sourceType":"module"}