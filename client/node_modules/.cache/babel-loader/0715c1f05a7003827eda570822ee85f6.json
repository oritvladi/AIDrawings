{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\AIDrawer\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction renderShape(shape, i) {\n  console.log(\"Rendering shape:\", shape, i);\n  const {\n    type,\n    x,\n    y,\n    width,\n    height,\n    color\n  } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: color,\n        stroke: color\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 14\n      }, this);\n    case \"Square\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: width,\n        fill: color,\n        stroke: color\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 14\n      }, this);\n    case \"Circle\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + width / 2,\n        rx: width / 2,\n        ry: width / 2,\n        fill: color,\n        stroke: color\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this);\n    case \"Ellipse\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + height / 2,\n        rx: width / 2,\n        ry: height / 2,\n        fill: color,\n        stroke: color\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    case \"Line\":\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + width,\n        y2: y + height,\n        stroke: color,\n        strokeWidth: \"3\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }, this);\n    case \"Triangle\":\n      return /*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: `\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `,\n        fill: color,\n        stroke: color\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    default:\n      return null;\n  }\n}\nexport default function App() {\n  _s();\n  var _canvases$selectedCan;\n  const [canvases, setCanvases] = useState([{\n    id: null,\n    name: \"new canvas\",\n    drawings: [],\n    isLoaded: true\n  }]);\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n  const currentDrawings = ((_canvases$selectedCan = canvases[selectedCanvasIdx]) === null || _canvases$selectedCan === void 0 ? void 0 : _canvases$selectedCan.drawings) || [];\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n  const [watchCanvases, setWatchCanvases] = useState(false);\n  useEffect(() => {\n    const canvas = canvases[selectedCanvasIdx];\n    if (!canvas) return;\n    if (canvas.id === null) setWatchCanvases(false);\n    if (canvas.id && !canvas.isLoaded) {\n      setWatchCanvases(true);\n      setLoading(true);\n      const loadCanvas = async () => {\n        try {\n          const res = await fetch(`/api/drawings/${canvas.id}`);\n          if (res.ok) {\n            const data = await res.json();\n            setCanvases(prev => {\n              const arr = prev.map((c, idx) => {\n                if (idx !== selectedCanvasIdx) return c;\n                return {\n                  ...c,\n                  drawings: data.drawings,\n                  isLoaded: true\n                };\n              });\n              console.log(\"Loaded canvas:\", arr);\n              return arr;\n            });\n          } else {\n            alert(\"Error loading the canvas\");\n          }\n        } catch {\n          alert(\"Communication error with the server\");\n        } finally {\n          setLoading(false);\n        }\n      };\n      loadCanvas();\n    }\n  }, [selectedCanvasIdx]);\n  useEffect(() => {\n    const loadCanvases = async () => {\n      try {\n        const res = await fetch(\"/api/drawings/all-canvases\");\n        if (res.ok) {\n          const data = await res.json();\n          const loadedCanvases = data.map(canvas => ({\n            id: canvas.id,\n            name: canvas.title,\n            drawings: [],\n            isLoaded: false\n          }));\n          setCanvases(prev => [{\n            id: null,\n            name: \"new canvas\",\n            drawings: [],\n            isLoaded: true\n          }, ...loadedCanvases]);\n        } else {\n          alert(\"Error loading the canvases\");\n        }\n      } catch (err) {\n        alert(\"Communication error with the server\");\n      }\n    };\n    loadCanvases();\n  }, []);\n  function handleClearDrawing() {\n    setUndoStack(prev => [...prev, currentDrawings]);\n    setRedoStack([]);\n    setCanvases(prev => {\n      const next = [...prev];\n      next[selectedCanvasIdx] = {\n        ...next[selectedCanvasIdx],\n        drawings: []\n      };\n      return next;\n    });\n  }\n  function handleUndo() {\n    if (undoStack.length === 0) return;\n    const stateToRestore = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [currentDrawings, ...prev]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setCanvases(prev => {\n      const next = [...prev];\n      next[selectedCanvasIdx] = {\n        ...next[selectedCanvasIdx],\n        drawings: stateToRestore\n      };\n      return next;\n    });\n  }\n  function handleRedo() {\n    if (redoStack.length === 0) return;\n    const stateToRestore = redoStack[0];\n    setUndoStack(prev => [...prev, currentDrawings]);\n    setRedoStack(prev => prev.slice(1));\n    setCanvases(prev => {\n      const next = [...prev];\n      next[selectedCanvasIdx] = {\n        ...next[selectedCanvasIdx],\n        drawings: stateToRestore\n      };\n      return next;\n    });\n  }\n  function handleSave() {\n    var _canvases$selectedCan2, _canvases$selectedCan3;\n    setCanvasName(((_canvases$selectedCan2 = canvases[selectedCanvasIdx]) === null || _canvases$selectedCan2 === void 0 ? void 0 : _canvases$selectedCan2.name) === \"new canvas\" ? \"\" : (_canvases$selectedCan3 = canvases[selectedCanvasIdx]) === null || _canvases$selectedCan3 === void 0 ? void 0 : _canvases$selectedCan3.name);\n    setShowSaveDialog(true);\n  }\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: canvasName,\n          drawings: currentDrawings\n        })\n      });\n      if (response.ok) {\n        const saved = await response.json();\n        setCanvases(prev => {\n          const newSavedCanvas = {\n            id: saved.id,\n            name: saved.name,\n            drawings: currentDrawings,\n            isLoaded: true\n          };\n          let updatedCanvases = [...prev];\n          const mainCanvasIdx = prev.findIndex(c => c.id === canvases[selectedCanvasIdx].id);\n          if (mainCanvasIdx !== -1) {\n            updatedCanvases[mainCanvasIdx] = newSavedCanvas;\n          } else {\n            updatedCanvases.push(newSavedCanvas);\n          }\n          const newEmptyCanvas = {\n            id: null,\n            name: \"new canvas\",\n            drawings: [],\n            isLoaded: true\n          };\n          updatedCanvases.push(newEmptyCanvas);\n          setSelectedCanvasIdx(updatedCanvases.length - 1);\n          return updatedCanvases;\n        });\n        setMessages([]);\n        setRedoStack([]);\n        setUndoStack([]);\n        alert(\"Canvas saved successfully! Moving to a new canvas.\");\n      } else {\n        alert(\"Error saving the canvas\");\n      }\n    } catch (err) {\n      alert(\"Communication error with the server\");\n    }\n  }\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n    setUndoStack([]);\n    setRedoStack([]);\n    setMessages([]);\n  }\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, {\n      from: \"user\",\n      text: prompt\n    }]);\n    setLoading(true);\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: currentDrawings\n        })\n      });\n      if (!response.ok) throw new Error(\"Server error\");\n      const newShapes = await response.json();\n      setUndoStack(prev => [...prev, currentDrawings]);\n      setRedoStack([]);\n      setCanvases(prev => {\n        const next = [...prev];\n        const newDrawing = {\n          description: prompt,\n          shapes: newShapes\n        };\n        const currentCanvas = next[selectedCanvasIdx];\n        next[selectedCanvasIdx] = {\n          ...currentCanvas,\n          drawings: [...currentCanvas.drawings, newDrawing]\n        };\n        return next;\n      });\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"Drawing added successfully!\"\n      }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"Error communicating with the server\"\n      }]);\n    }\n    setLoading(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"canvas-select\",\n        value: selectedCanvasIdx,\n        onChange: e => handleSelectCanvas(Number(e.target.value)),\n        children: canvases.map((canvas, idx) => {\n          var _canvas$id;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: idx,\n            children: canvas.name\n          }, (_canvas$id = canvas.id) !== null && _canvas$id !== void 0 ? _canvas$id : `new-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn orange\",\n        onClick: handleUndo,\n        disabled: undoStack.length === 0 || watchCanvases,\n        children: \"undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn purple\",\n        onClick: handleRedo,\n        disabled: redoStack.length === 0 || watchCanvases,\n        children: \"redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn off-white\",\n        onClick: handleClearDrawing,\n        disabled: watchCanvases,\n        children: \"clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn yellow\",\n        onClick: handleSave,\n        disabled: watchCanvases,\n        children: \"save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: \"chat history\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-msg ${msg.from}`,\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: msg.from === \"user\" ? \"you:\" : \"bot:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this), \" \", msg.text]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prompt,\n            onChange: e => setPrompt(e.target.value),\n            placeholder: \"write a message...\",\n            disabled: loading || watchCanvases,\n            onKeyDown: e => e.key === \"Enter\" && handleSend()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSend,\n            disabled: loading || !prompt.trim(),\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-section\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"600\",\n          height: \"400\",\n          children: currentDrawings.flatMap((drawing, dIdx) => drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), showSaveDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"rgba(0,0,0,0.3)\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: \"#fff\",\n          padding: 30,\n          borderRadius: 10,\n          boxShadow: \"0 2px 12px #0002\",\n          minWidth: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 10,\n            fontWeight: \"bold\"\n          },\n          children: \"canvas name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: canvasName,\n          onChange: e => setCanvasName(e.target.value),\n          placeholder: \"insert canvas name\",\n          style: {\n            width: \"100%\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            marginBottom: 16\n          },\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10,\n            justifyContent: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn green\",\n            onClick: handleSaveCanvas,\n            disabled: !canvasName.trim(),\n            children: \"save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn orange\",\n            onClick: () => setShowSaveDialog(false),\n            children: \"cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7PtIfDAxhnSVUcIEhILHIc/zxoA=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","renderShape","shape","i","console","log","type","x","y","width","height","color","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","rx","ry","x1","y1","x2","y2","strokeWidth","points","App","_s","_canvases$selectedCan","canvases","setCanvases","id","name","drawings","isLoaded","selectedCanvasIdx","setSelectedCanvasIdx","currentDrawings","undoStack","setUndoStack","redoStack","setRedoStack","prompt","setPrompt","loading","setLoading","messages","setMessages","showSaveDialog","setShowSaveDialog","canvasName","setCanvasName","watchCanvases","setWatchCanvases","canvas","loadCanvas","res","fetch","ok","data","json","prev","arr","map","c","idx","alert","loadCanvases","loadedCanvases","title","err","handleClearDrawing","next","handleUndo","length","stateToRestore","slice","handleRedo","handleSave","_canvases$selectedCan2","_canvases$selectedCan3","handleSaveCanvas","trim","response","method","headers","body","JSON","stringify","saved","newSavedCanvas","updatedCanvases","mainCanvasIdx","findIndex","push","newEmptyCanvas","handleSelectCanvas","handleSend","from","text","existingDrawings","Error","newShapes","newDrawing","description","shapes","currentCanvas","msgs","className","children","value","onChange","e","Number","target","_canvas$id","onClick","disabled","msg","placeholder","onKeyDown","key","flatMap","drawing","dIdx","style","position","top","left","background","display","alignItems","justifyContent","zIndex","padding","borderRadius","boxShadow","minWidth","marginBottom","fontWeight","border","autoFocus","gap","_c","$RefreshReg$"],"sources":["C:/Users/1/פרויקטים/AIDrawer/client/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction renderShape(shape, i) {\n  console.log(\"Rendering shape:\", shape, i);\n  const { type, x, y, width, height, color } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke={color} />;\n    case \"Square\":\n      return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke={color} />;\n    case \"Circle\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + width / 2}\n          rx={width / 2}\n          ry={width / 2}\n          fill={color}\n          stroke={color}\n        />\n      );\n    case \"Ellipse\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + height / 2}\n          rx={width / 2}\n          ry={height / 2}\n          fill={color}\n          stroke={color}\n        />\n      );\n    case \"Line\":\n      return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n    case \"Triangle\":\n      return (\n        <polygon\n          key={i}\n          points={`\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `}\n          fill={color}\n          stroke={color}\n        />\n      );\n    default:\n      return null;\n  }\n}\n\nexport default function App() {\n  const [canvases, setCanvases] = useState([\n    { id: null, name: \"new canvas\", drawings: [], isLoaded: true }\n  ]);\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n  const currentDrawings = canvases[selectedCanvasIdx]?.drawings || [];\n  const [undoStack, setUndoStack] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n  const [watchCanvases, setWatchCanvases] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvases[selectedCanvasIdx];\n    if (!canvas)\n      return;\n    if (canvas.id === null)\n      setWatchCanvases(false);\n    if (canvas.id && !canvas.isLoaded) {\n      setWatchCanvases(true);\n      setLoading(true);\n      const loadCanvas = async () => {\n        try {\n          const res = await fetch(`/api/drawings/${canvas.id}`);\n          if (res.ok) {\n            const data = await res.json();\n            setCanvases(prev => {\n              const arr = prev.map((c, idx) => {\n                if (idx !== selectedCanvasIdx) return c;\n                return {\n                  ...c,\n                  drawings: data.drawings,\n                  isLoaded: true,\n                };\n              });\n              console.log(\"Loaded canvas:\", arr);\n              return arr;\n            });\n          } else {\n            alert(\"Error loading the canvas\");\n          }\n        } catch {\n          alert(\"Communication error with the server\");\n        } finally {\n          setLoading(false);\n        }\n      };\n      loadCanvas();\n    }\n  }, [selectedCanvasIdx]);\n\n  useEffect(() => {\n    const loadCanvases = async () => {\n      try {\n        const res = await fetch(\"/api/drawings/all-canvases\");\n        if (res.ok) {\n          const data = await res.json();\n          const loadedCanvases = data.map(canvas => ({\n            id: canvas.id,\n            name: canvas.title,\n            drawings: [],\n            isLoaded: false,\n          }));\n          setCanvases(prev => [{ id: null, name: \"new canvas\", drawings: [], isLoaded: true }, ...loadedCanvases]);\n        } else {\n          alert(\"Error loading the canvases\");\n        }\n      } catch (err) {\n        alert(\"Communication error with the server\");\n      }\n    };\n    loadCanvases();\n  }, []);\n\n  function handleClearDrawing() {\n    setUndoStack(prev => [...prev, currentDrawings]);\n    setRedoStack([]);\n    setCanvases(prev => {\n      const next = [...prev];\n      next[selectedCanvasIdx] = { ...next[selectedCanvasIdx], drawings: [] };\n      return next;\n    });\n  }\n\n  function handleUndo() {\n    if (undoStack.length === 0) return;\n    const stateToRestore = undoStack[undoStack.length - 1];\n    setRedoStack(prev => [currentDrawings, ...prev]);\n    setUndoStack(prev => prev.slice(0, -1));\n    setCanvases(prev => {\n      const next = [...prev];\n      next[selectedCanvasIdx] = { ...next[selectedCanvasIdx], drawings: stateToRestore };\n      return next;\n    });\n  }\n\n  function handleRedo() {\n    if (redoStack.length === 0) return;\n    const stateToRestore = redoStack[0];\n    setUndoStack(prev => [...prev, currentDrawings]);\n    setRedoStack(prev => prev.slice(1));\n    setCanvases(prev => {\n      const next = [...prev];\n      next[selectedCanvasIdx] = { ...next[selectedCanvasIdx], drawings: stateToRestore };\n      return next;\n    });\n  }\n\n  function handleSave() {\n    setCanvasName(canvases[selectedCanvasIdx]?.name === \"new canvas\" ? \"\" : canvases[selectedCanvasIdx]?.name);\n    setShowSaveDialog(true);\n  }\n\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          title: canvasName,\n          drawings: currentDrawings\n        })\n      });\n\n      if (response.ok) {\n        const saved = await response.json();\n        setCanvases(prev => {\n          const newSavedCanvas = {\n            id: saved.id,\n            name: saved.name,\n            drawings: currentDrawings,\n            isLoaded: true,\n          };\n\n          let updatedCanvases = [...prev];\n          const mainCanvasIdx = prev.findIndex(c => c.id === canvases[selectedCanvasIdx].id);\n\n          if (mainCanvasIdx !== -1) {\n            updatedCanvases[mainCanvasIdx] = newSavedCanvas;\n          } else {\n            updatedCanvases.push(newSavedCanvas);\n          }\n\n          const newEmptyCanvas = { id: null, name: \"new canvas\", drawings: [], isLoaded: true };\n          updatedCanvases.push(newEmptyCanvas);\n          setSelectedCanvasIdx(updatedCanvases.length - 1);\n          return updatedCanvases;\n\n        });\n        setMessages([]);\n        setRedoStack([]);\n        setUndoStack([]);\n        alert(\"Canvas saved successfully! Moving to a new canvas.\");\n      } else {\n        alert(\"Error saving the canvas\");\n      }\n    } catch (err) {\n      alert(\"Communication error with the server\");\n    }\n  }\n\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n    setUndoStack([]);\n    setRedoStack([]);\n    setMessages([]);\n  }\n\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, { from: \"user\", text: prompt }]);\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: currentDrawings\n        })\n      });\n\n      if (!response.ok) throw new Error(\"Server error\");\n\n      const newShapes = await response.json();\n\n      setUndoStack(prev => [...prev, currentDrawings]);\n      setRedoStack([]);\n\n      setCanvases(prev => {\n        const next = [...prev];\n        const newDrawing = { description: prompt, shapes: newShapes };\n        const currentCanvas = next[selectedCanvasIdx];\n        next[selectedCanvasIdx] = {\n          ...currentCanvas,\n          drawings: [...currentCanvas.drawings, newDrawing],\n        };\n        return next;\n      });\n\n      setMessages(msgs => [...msgs, { from: \"bot\", text: \"Drawing added successfully!\" }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages(msgs => [...msgs, { from: \"bot\", text: \"Error communicating with the server\" }]);\n    }\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"toolbar\">\n        <select className=\"canvas-select\" value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n          {canvases.map((canvas, idx) => (\n            <option key={canvas.id ?? `new-${idx}`} value={idx}>{canvas.name}</option>\n          ))}\n        </select>\n        <button\n          className=\"toolbar-btn orange\"\n          onClick={handleUndo}\n          disabled={undoStack.length === 0 || watchCanvases}\n        >\n          undo\n        </button>\n        <button\n          className=\"toolbar-btn purple\"\n          onClick={handleRedo}\n          disabled={redoStack.length === 0 || watchCanvases}\n        >\n          redo\n        </button>\n        <button\n          className=\"toolbar-btn off-white\"\n          onClick={handleClearDrawing}\n          disabled={watchCanvases}\n        >\n          clear\n        </button>\n        <button\n          className=\"toolbar-btn yellow\"\n          onClick={handleSave}\n          disabled={watchCanvases}\n        >\n          save\n        </button>\n\n      </div>\n      <div className=\"main-content\">\n        <div className=\"chat-section\">\n          <div className=\"chat-title\">chat history</div>\n          <div className=\"chat-messages\">\n            {messages.map((msg, i) => (\n              <div key={i} className={`chat-msg ${msg.from}`}>\n                <b>{msg.from === \"user\" ? \"you:\" : \"bot:\"}</b> {msg.text}\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-input-row\">\n            <input\n              type=\"text\"\n              value={prompt}\n              onChange={e => setPrompt(e.target.value)}\n              placeholder=\"write a message...\"\n  disabled={loading || watchCanvases}\n              onKeyDown={e => e.key === \"Enter\" && handleSend()}\n            />\n            <button onClick={handleSend} disabled={loading || !prompt.trim()}>\n              send\n            </button>\n          </div>\n        </div>\n        <div className=\"canvas-section\">\n          <svg width=\"600\" height=\"400\">\n            {currentDrawings.flatMap((drawing, dIdx) => drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`)))}\n          </svg>\n        </div>\n      </div>\n\n      {showSaveDialog && (\n        <div style={{ position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\", background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000 }}>\n          <div style={{ background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300 }}>\n            <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>canvas name:</div>\n            <input\n              type=\"text\"\n              value={canvasName}\n              onChange={e => setCanvasName(e.target.value)}\n              placeholder=\"insert canvas name\"\n              style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n              autoFocus\n            />\n            <div style={{ display: \"flex\", gap: 10, justifyContent: \"center\" }}>\n              <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>save</button>\n              <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>cancel</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}