{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05E7\\u05D8\\u05D9\\u05DD\\\\AIDrawer\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction renderShape(shape, i) {\n  const {\n    type,\n    x,\n    y,\n    width,\n    height,\n    color\n  } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 14\n      }, this);\n    case \"Square\":\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: width,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 14\n      }, this);\n    case \"Circle\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + width / 2,\n        rx: width / 2,\n        ry: width / 2,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this);\n    case \"Ellipse\":\n      return /*#__PURE__*/_jsxDEV(\"ellipse\", {\n        cx: x + width / 2,\n        cy: y + height / 2,\n        rx: width / 2,\n        ry: height / 2,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this);\n    case \"Line\":\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: x,\n        y1: y,\n        x2: x + width,\n        y2: y + height,\n        stroke: color,\n        strokeWidth: \"3\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 14\n      }, this);\n    case \"Triangle\":\n      return /*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: `\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `,\n        fill: color,\n        stroke: \"#333\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this);\n    default:\n      return null;\n  }\n}\nexport default function App() {\n  _s();\n  const [canvases, setCanvases] = useState([{\n    id: null,\n    name: \"קנבס ראשי\",\n    drawings: [],\n    undoStack: [[]],\n    redoStack: []\n  }]);\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n  const currentCanvas = canvases[selectedCanvasIdx];\n  const currentDrawings = currentCanvas.drawings;\n  const currentShapes = currentDrawings.flatMap(drawing => drawing.shapes);\n  const currentUndoStack = currentCanvas.undoStack;\n  const currentRedoStack = currentCanvas.redoStack;\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n\n  // פונקציה לעדכון מצב הצורות בקנבס וניהול היסטוריית אנדו/רדו\n  const updateCanvasShapes = (newShapes, shouldPushToUndo = true) => {\n    setCanvases(prevCanvases => {\n      const updatedCanvases = [...prevCanvases];\n      const canvasToUpdate = {\n        ...updatedCanvases[selectedCanvasIdx]\n      };\n\n      // שומרים את המצב הנוכחי של כל הצורות לפני השינוי ב-undoStack\n      if (shouldPushToUndo) {\n        // Only push if the shapes actually changed to prevent redundant history states\n        if (JSON.stringify(canvasToUpdate.drawings.flatMap(d => d.shapes)) !== JSON.stringify(newShapes)) {\n          canvasToUpdate.undoStack = [...canvasToUpdate.undoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)];\n          canvasToUpdate.redoStack = []; // מנקים את Redo כשמתבצעת פעולה חדשה\n        }\n      }\n\n      // מעדכנים את הצורות של הציור הראשי בקנבס\n      let newDrawingsArray;\n      if (canvasToUpdate.drawings.length === 0) {\n        newDrawingsArray = [{\n          description: \"ציור ראשי\",\n          shapes: newShapes\n        }];\n      } else {\n        newDrawingsArray = [...canvasToUpdate.drawings];\n        // אנחנו מעדכנים רק את הצורות של הציור האחרון או יוצרים חדש אם לא קיים\n        // זה שומר על תיאורי הפרומפטים הקודמים\n        const lastDrawingIdx = newDrawingsArray.length - 1;\n        newDrawingsArray[lastDrawingIdx] = {\n          ...newDrawingsArray[lastDrawingIdx],\n          shapes: newShapes // newShapes כאן מתייחס לכלל הצורות בקנבס\n        };\n      }\n      canvasToUpdate.drawings = newDrawingsArray;\n      updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n      return updatedCanvases;\n    });\n  };\n\n  // הסרנו את ה-useEffect שגרם ללולאה אינסופית\n  // ניהול מצב הקנבס מתבצע כעת ב-handleSelectCanvas באופן מבוקר יותר.\n\n  function handleClearDrawing() {\n    updateCanvasShapes([], true); // מנקה את כל הצורות ומוסיף ל-undo stack\n  }\n\n  // Undo\n  function handleUndo() {\n    if (currentUndoStack.length <= 1) return;\n    setCanvases(prevCanvases => {\n      const updatedCanvases = [...prevCanvases];\n      const canvasToUpdate = {\n        ...updatedCanvases[selectedCanvasIdx]\n      };\n      const prevShapesState = canvasToUpdate.undoStack[canvasToUpdate.undoStack.length - 1]; // המצב השמור\n      const newUndoStack = canvasToUpdate.undoStack.slice(0, -1);\n      const newRedoStack = [...canvasToUpdate.redoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)]; // שומרים את המצב הנוכחי עבור Redo\n\n      // מכיוון ש-prevShapesState הוא מערך של צורות, אנו צריכים לטפל איך הוא משפיע על ה-drawings\n      // האסטרטגיה הנפוצה היא שאנדו מחזיר את כלל הצורות במצב הקודם\n      // ולכן אנו נאחד את כלל הצורות למערך drawings יחיד (ציור ראשי)\n      let newDrawingsArray;\n      if (prevShapesState.length === 0 && canvasToUpdate.drawings.length > 1) {\n        // אם המצב הקודם היה ריק ויש לנו כמה ציורים, כנראה ש\"אנדו\" מכוון למצב שלפני יצירתם\n        // או לפני ניקוי כללי - נשמור רק ציור ראשי ריק\n        newDrawingsArray = [{\n          description: \"ציור ראשי\",\n          shapes: []\n        }];\n      } else {\n        // נניח שאנדו תמיד משפיע על \"ציור ראשי\" שמאגד את כל הצורות,\n        // כדי לשמור על המבנה של מערך drawings עם תיאורים.\n        // נשמור את כלל הצורות המוחזרות בציור האחרון/ראשי.\n        if (canvasToUpdate.drawings.length === 0) {\n          newDrawingsArray = [{\n            description: \"ציור ראשי\",\n            shapes: prevShapesState\n          }];\n        } else {\n          newDrawingsArray = [...canvasToUpdate.drawings];\n          newDrawingsArray[newDrawingsArray.length - 1] = {\n            ...newDrawingsArray[newDrawingsArray.length - 1],\n            shapes: prevShapesState\n          };\n        }\n      }\n      canvasToUpdate.drawings = newDrawingsArray;\n      canvasToUpdate.undoStack = newUndoStack;\n      canvasToUpdate.redoStack = newRedoStack;\n      updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n      return updatedCanvases;\n    });\n  }\n  function handleRedo() {\n    if (currentRedoStack.length === 0) return;\n    setCanvases(prevCanvases => {\n      const updatedCanvases = [...prevCanvases];\n      const canvasToUpdate = {\n        ...updatedCanvases[selectedCanvasIdx]\n      };\n      const [nextShapesState, ...restRedo] = canvasToUpdate.redoStack; // המצב הבא ל-Redo\n      const newUndoStack = [...canvasToUpdate.undoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)]; // שומרים את המצב הנוכחי עבור Undo\n      const newRedoStack = restRedo;\n\n      // בדומה ל-Undo, מעדכנים את הצורות בציור הראשי/אחרון\n      let newDrawingsArray;\n      if (canvasToUpdate.drawings.length === 0) {\n        newDrawingsArray = [{\n          description: \"ציור ראשי\",\n          shapes: nextShapesState\n        }];\n      } else {\n        newDrawingsArray = [...canvasToUpdate.drawings];\n        newDrawingsArray[newDrawingsArray.length - 1] = {\n          ...newDrawingsArray[newDrawingsArray.length - 1],\n          shapes: nextShapesState\n        };\n      }\n      canvasToUpdate.drawings = newDrawingsArray;\n      canvasToUpdate.undoStack = newUndoStack;\n      canvasToUpdate.redoStack = newRedoStack;\n      updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n      return updatedCanvases;\n    });\n  }\n\n  // פתיחת דיאלוג שמירה\n  function handleSave() {\n    setCanvasName(\"\");\n    setShowSaveDialog(true);\n  }\n\n  // שמירת קנבס לשרת (מקבל id מהשרת)\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: canvasName,\n          drawings: currentDrawings // שולחים את כל הציורים הקיימים בקנבס הנוכחי\n        })\n      });\n      if (response.ok) {\n        const saved = await response.json();\n        setCanvases(prev => {\n          const newCanvases = [...prev];\n          // אם זה היה הקנבס הראשי ללא ID, מעדכנים אותו.\n          // אחרת, זהו קנבס חדש לגמרי, נוסיף אותו.\n          // בהנחה שהשמירה היא תמיד על הקנבס הנוכחי.\n          if (newCanvases[selectedCanvasIdx].id === null) {\n            newCanvases[selectedCanvasIdx] = {\n              ...newCanvases[selectedCanvasIdx],\n              id: saved.id,\n              name: saved.name\n              // ה-drawings, undoStack, redoStack כבר מעודכנים ב-state\n            };\n          } else {\n            // אם שמרנו קנבס קיים, יכול להיות שנרצה להציג שהוא עודכן\n            // אך המצב כאן הוא שהכפתור save יוצר קנבס חדש במערך ה-canvases\n            // ואז בוחר בו. אם תרצה לשנות את ההתנהגות לשמירה על קנבס קיים\n            // זה ידרוש לוגיקה נוספת.\n            const newSavedCanvas = {\n              id: saved.id,\n              name: saved.name,\n              drawings: currentDrawings,\n              // המצב הנוכחי של הציורים\n              undoStack: [currentShapes],\n              // מאתחל היסטוריה לנקודת השמירה\n              redoStack: []\n            };\n            newCanvases.push(newSavedCanvas);\n            setSelectedCanvasIdx(newCanvases.length - 1); // עובר לקנבס החדש שנשמר\n          }\n          return newCanvases;\n        });\n        alert(\"הקנבס נשמר בהצלחה!\");\n      } else {\n        alert(\"שגיאה בשמירת הקנבס\");\n      }\n    } catch (err) {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n    setMessages([]); // מנקה היסטוריית שיחה בהחלפת קנבס\n\n    const canvas = canvases[idx];\n\n    // אם זהו קנבס חדש ללא ID (כמו \"קנבס ראשי\" לפני שמירה),\n    // נאפס את מצבו המקומי בתוך ה-canvases array.\n    if (canvas.id === null) {\n      setCanvases(prevCanvases => {\n        const newCanvases = [...prevCanvases];\n        newCanvases[idx] = {\n          ...newCanvases[idx],\n          drawings: [{\n            description: \"ציור ראשון\",\n            shapes: []\n          }],\n          // מבטיחים שיש לפחות ציור אחד ריק\n          undoStack: [[]],\n          redoStack: []\n        };\n        return newCanvases;\n      });\n      return; // סיום הפונקציה לאחר עדכון המצב המקומי\n    }\n\n    // אם הקנבס נטען מהשרת (יש לו ID)\n    try {\n      const res = await fetch(`/api/drawings/get/${canvas.id}`);\n      if (res.ok) {\n        const data = await res.json();\n        setCanvases(prevCanvases => {\n          const newCanvases = [...prevCanvases];\n          newCanvases[idx] = {\n            ...newCanvases[idx],\n            drawings: data.drawings,\n            // טוענים את הציורים שהגיעו מהשרת\n            undoStack: [data.drawings.flatMap(d => d.shapes)],\n            // מצב התחלתי לאנדו\n            redoStack: []\n          };\n          return newCanvases;\n        });\n      } else {\n        alert(\"שגיאה בטעינת הקנבס\");\n      }\n    } catch {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  // שליחת הודעה לשרת\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, {\n      from: \"user\",\n      text: prompt\n    }]);\n    setLoading(true);\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: currentDrawings // שולחים את כל הציורים הקיימים\n        })\n      });\n      if (!response.ok) {\n        setMessages(msgs => [...msgs, {\n          from: \"bot\",\n          text: \"שגיאה בשליחת הבקשה לשרת\"\n        }]);\n        setLoading(false);\n        return;\n      }\n      const newShapes = await response.json();\n      setCanvases(prevCanvases => {\n        const updatedCanvases = [...prevCanvases];\n        const canvasToUpdate = {\n          ...updatedCanvases[selectedCanvasIdx]\n        };\n\n        // שומרים את המצב הנוכחי של כל הצורות לפני הוספת החדשות ל-undoStack\n        canvasToUpdate.undoStack = [...canvasToUpdate.undoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)];\n        canvasToUpdate.redoStack = []; // מנקים את Redo כשמתבצעת פעולה חדשה\n\n        // מוסיפים את הציור החדש (עם התיאור והצורות שלו) למערך ה-drawings של הקנבס הנוכחי\n        canvasToUpdate.drawings = [...canvasToUpdate.drawings, {\n          description: prompt,\n          shapes: newShapes\n        }];\n        updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n        return updatedCanvases;\n      });\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"הציור התעדכן בהצלחה!\"\n      }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages(msgs => [...msgs, {\n        from: \"bot\",\n        text: \"שגיאה בתקשורת עם השרת\"\n      }]);\n    }\n    setLoading(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCanvasIdx,\n        onChange: e => handleSelectCanvas(Number(e.target.value)),\n        children: canvases.map((canvas, idx) => {\n          var _canvas$id;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: idx,\n            children: canvas.name\n          }, (_canvas$id = canvas.id) !== null && _canvas$id !== void 0 ? _canvas$id : `canvas-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn orange\",\n        onClick: handleUndo,\n        disabled: currentUndoStack.length <= 1,\n        children: \"\\u05D0\\u05E0\\u05D3\\u05D5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn purple\",\n        onClick: handleRedo,\n        disabled: currentRedoStack.length === 0,\n        children: \"\\u05E8\\u05D3\\u05D5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn red\",\n        onClick: handleClearDrawing,\n        children: \"\\u05E0\\u05D9\\u05E7\\u05D5\\u05D9 \\u05DC\\u05D5\\u05D7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toolbar-btn green\",\n        onClick: handleSave,\n        children: \"\\u05E1\\u05D9\\u05D9\\u05D1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: \"\\u05D4\\u05D9\\u05E1\\u05D8\\u05D5\\u05E8\\u05D9\\u05D9\\u05EA \\u05E9\\u05D9\\u05D7\\u05D4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-msg ${msg.from}`,\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: msg.from === \"user\" ? \"אתה:\" : \"בוט:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 17\n            }, this), \" \", msg.text]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: prompt,\n            onChange: e => setPrompt(e.target.value),\n            placeholder: \"\\u05DB\\u05EA\\u05D5\\u05D1 \\u05D4\\u05D5\\u05D3\\u05E2\\u05D4 \\u05DC\\u05D1\\u05D5\\u05D8...\",\n            disabled: loading,\n            onKeyDown: e => e.key === \"Enter\" && handleSend()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSend,\n            disabled: loading || !prompt.trim(),\n            children: \"\\u05E9\\u05DC\\u05D7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvas-section\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"\\u05DE\\u05E6\\u05D9\\u05D9\\u05E8 \\u05DC\\u05DA...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"600\",\n          height: \"400\",\n          children: currentShapes.map((shape, i) => renderShape(shape, i))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 7\n    }, this), showSaveDialog && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"rgba(0,0,0,0.3)\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: \"#fff\",\n          padding: 30,\n          borderRadius: 10,\n          boxShadow: \"0 2px 12px #0002\",\n          minWidth: 300\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: 10,\n            fontWeight: \"bold\"\n          },\n          children: \"\\u05E9\\u05DD \\u05D4\\u05E7\\u05E0\\u05D1\\u05E1:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: canvasName,\n          onChange: e => setCanvasName(e.target.value),\n          placeholder: \"\\u05D4\\u05DB\\u05E0\\u05E1 \\u05E9\\u05DD \\u05DC\\u05E7\\u05E0\\u05D1\\u05E1\",\n          style: {\n            width: \"100%\",\n            padding: 8,\n            borderRadius: 6,\n            border: \"1px solid #ccc\",\n            marginBottom: 16\n          },\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: 10,\n            justifyContent: \"flex-end\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn green\",\n            onClick: handleSaveCanvas,\n            disabled: !canvasName.trim(),\n            children: \"\\u05E9\\u05DE\\u05D5\\u05E8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toolbar-btn orange\",\n            onClick: () => setShowSaveDialog(false),\n            children: \"\\u05D1\\u05D9\\u05D8\\u05D5\\u05DC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 779,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bNAuwMg2eAOl3VymBH0qjpk7bY0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","renderShape","shape","i","type","x","y","width","height","color","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","rx","ry","x1","y1","x2","y2","strokeWidth","points","App","_s","canvases","setCanvases","id","name","drawings","undoStack","redoStack","selectedCanvasIdx","setSelectedCanvasIdx","currentCanvas","currentDrawings","currentShapes","flatMap","drawing","shapes","currentUndoStack","currentRedoStack","prompt","setPrompt","loading","setLoading","messages","setMessages","showSaveDialog","setShowSaveDialog","canvasName","setCanvasName","updateCanvasShapes","newShapes","shouldPushToUndo","prevCanvases","updatedCanvases","canvasToUpdate","JSON","stringify","d","newDrawingsArray","length","description","lastDrawingIdx","handleClearDrawing","handleUndo","prevShapesState","newUndoStack","slice","newRedoStack","handleRedo","nextShapesState","restRedo","handleSave","handleSaveCanvas","trim","response","fetch","method","headers","body","title","ok","saved","json","prev","newCanvases","newSavedCanvas","push","alert","err","handleSelectCanvas","idx","canvas","res","data","handleSend","from","text","existingDrawings","msgs","className","children","value","onChange","e","Number","target","map","_canvas$id","onClick","disabled","msg","placeholder","onKeyDown","key","style","position","top","left","background","display","alignItems","justifyContent","zIndex","padding","borderRadius","boxShadow","minWidth","marginBottom","fontWeight","border","autoFocus","gap","_c","$RefreshReg$"],"sources":["C:/Users/1/פרויקטים/AIDrawer/client/src/App.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// function renderShape(shape, i) {\n//   const { type, x, y, width, height, color } = shape;\n//   switch (type) {\n//     case \"Rectangle\":\n//       return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n//     case \"Square\":\n//       return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n//     case \"Circle\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + width / 2}\n//           rx={width / 2}\n//           ry={width / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Ellipse\":\n//       return (\n//         <ellipse\n//           key={i}\n//           cx={x + width / 2}\n//           cy={y + height / 2}\n//           rx={width / 2}\n//           ry={height / 2}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     case \"Line\":\n//       return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n//     case \"Triangle\":\n//       return (\n//         <polygon\n//           key={i}\n//           points={`\n//             ${x + width / 2},${y}\n//             ${x},${y + height}\n//             ${x + width},${y + height}\n//           `}\n//           fill={color}\n//           stroke=\"#333\"\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// }\n\n// export default function App() {\n//   const [canvases, setCanvases] = useState([\n//     { id: null, name: \"קנבס ראשי\", drawings: [{ description: \"ציור ראשון\", shapes: [] }] }\n//   ]);\n//   const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n//   const [drawings, setDrawings] = useState(canvases[0].drawings);\n\n//   // Undo ו-Redo הם עבור כל ציור בקנבס\n//   const [selectedDrawingIdx, setSelectedDrawingIdx] = useState(0);\n//   const [undoStack, setUndoStack] = useState([[[]]]);\n//   const [redoStack, setRedoStack] = useState([[]]);\n\n//   // שאר הסטייטים\n//   const [prompt, setPrompt] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [showSaveDialog, setShowSaveDialog] = useState(false);\n//   const [canvasName, setCanvasName] = useState(\"\");\n\n//   // עדכון סטייטים כאשר מחליפים קנבס\n//   useEffect(() => {\n//     setDrawings(canvases[selectedCanvasIdx].drawings);\n//     setSelectedDrawingIdx(0);\n//     setUndoStack([[[]]]);\n//     setRedoStack([[]]);\n//     setMessages([]);\n//   }, [selectedCanvasIdx, canvases]);\n\n//   // עדכון undoStack כאשר מוסיפים ציור חדש\n//   useEffect(() => {\n//     if (undoStack.length < drawings.length) {\n//       setUndoStack([...undoStack, [[]]]);\n//       setRedoStack([...redoStack, []]);\n//     }\n//   }, [drawings, undoStack, redoStack]);\n\n//   function handleClearDrawing() {\n//     // שומר אנדו לניקוי כל הציורים\n//     setUndoStack(undoStack.map((stack, i) => [...stack, drawings[i].shapes]));\n//     setRedoStack(redoStack.map(() => []));\n//     setDrawings(drawings.map(drawing => ({ ...drawing, shapes: [] })));\n//   }\n\n//   // Undo\n//   function handleUndo() {\n//     console.log(\"Undo Stack before:\", undoStack[selectedDrawingIdx]);\n\n//     if (undoStack[selectedDrawingIdx].length <= 1) return;\n//     const newUndoStack = undoStack.map((stack, i) =>\n//       i === selectedDrawingIdx ? stack.slice(0, -1) : stack\n//     );\n//     const prevShapes = newUndoStack[selectedDrawingIdx][newUndoStack[selectedDrawingIdx].length - 1] || [];\n//     setUndoStack(newUndoStack);\n//     setRedoStack(redoStack.map((stack, i) =>\n//       i === selectedDrawingIdx\n//         ? [drawings[selectedDrawingIdx].shapes, ...stack]\n//         : stack\n//     ));\n//     setDrawings(drawings.map((drawing, i) =>\n//       i === selectedDrawingIdx\n//         ? { ...drawing, shapes: prevShapes }\n//         : drawing\n//     ));\n//   }\n\n\n//   function handleRedo() {\n//     setRedoStack(prevRedoStack => {\n//       const stack = prevRedoStack[selectedDrawingIdx];\n//       console.log(\"Redo Stack before:\", stack);\n//       if (!stack || stack.length === 0) return prevRedoStack;\n\n//       const [nextShapes, ...restRedo] = stack;\n//       console.log(\"Redoing shapes:\", nextShapes);\n\n//       const newRedoStack = prevRedoStack.map((s, i) =>\n//         i === selectedDrawingIdx ? restRedo : s\n//       );\n\n//       setUndoStack(prevUndoStack => {\n//         const newUndoStack = prevUndoStack.map((s, i) =>\n//           i === selectedDrawingIdx ? [...s, nextShapes] : s\n//         );\n\n//         setDrawings(prevDrawings =>\n//           prevDrawings.map((drawing, i) =>\n//             i === selectedDrawingIdx ? { ...drawing, shapes: nextShapes } : drawing\n//           )\n//         );\n\n//         return newUndoStack;\n//       });\n\n//       return newRedoStack;\n//     });\n//   }\n\n//   // פתיחת דיאלוג שמירה\n//   function handleSave() {\n//     setCanvasName(\"\");\n//     setShowSaveDialog(true);\n//   }\n\n//   // שמירת קנבס לשרת (מקבל id מהשרת)\n//   async function handleSaveCanvas() {\n//     if (!canvasName.trim()) return;\n//     setShowSaveDialog(false);\n//     try {\n//       const response = await fetch(\"/api/drawings/save-canvas\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           title: canvasName,\n//           drawings: drawings\n//         })\n//       });\n\n//       if (response.ok) {\n//         const saved = await response.json();\n//         const newCanvas = {\n//           id: saved.id,\n//           name: saved.name,\n//           drawings: [{ description: \"ציור ראשון\", shapes: [] }]\n//         };\n\n//         setCanvases(prev => [...prev, newCanvas]);\n//         setSelectedCanvasIdx(0);\n\n//         alert(\"הקנבס נשמר בהצלחה!\");\n//       } else {\n//         alert(\"שגיאה בשמירת הקנבס\");\n//       }\n//     } catch (err) {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   async function handleSelectCanvas(idx) {\n//     setSelectedCanvasIdx(idx);\n//     const canvas = canvases[idx];\n//     if (!canvas.id) {\n//       setDrawings(canvas.drawings);\n//       setSelectedDrawingIdx(0);\n//       setUndoStack([[[]]]);\n//       setRedoStack([[]]);\n//       return;\n//     }\n\n//     try {\n//       const res = await fetch(`/api/drawings/get/${canvas.id}`);\n//       if (res.ok) {\n//         const data = await res.json();\n//         setDrawings(data.drawings);\n//         setSelectedDrawingIdx(0);\n//         setUndoStack([[[]]]);\n//         setRedoStack([[]]);\n//       } else {\n//         alert(\"שגיאה בטעינת הקנבס\");\n//       }\n//     } catch {\n//       alert(\"שגיאה בתקשורת עם השרת\");\n//     }\n//   }\n\n//   // שליחת הודעה לשרת\n//   async function handleSend() {\n//     if (!prompt.trim()) return;\n//     setMessages([...messages, { from: \"user\", text: prompt }]);\n//     setLoading(true);\n\n//     try {\n//       const response = await fetch(\"/api/drawings/add-draw\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           prompt,\n//           existingDrawings: drawings\n//         })\n//       });\n\n//       if (!response.ok) {\n//         setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n//         setLoading(false);\n//         return;\n//       }\n\n//       const newShapes = await response.json();\n\n//       setUndoStack(undoStack.map((stack, i) =>\n//         i === selectedDrawingIdx\n//           ? [...stack, [...drawings[selectedDrawingIdx].shapes, ...newShapes]]\n//           : stack\n//       ));\n//       setRedoStack(redoStack.map((stack, i) =>\n//         i === selectedDrawingIdx ? [] : stack\n//       ));\n\n//       // setDrawings(ds => ds.map((drawing, i) =>\n//       //   i === selectedDrawingIdx\n//       //     ? { ...drawing, shapes: [...drawing.shapes, ...newShapes] }\n//       //     : drawing\n//       // ));\n//       // setDrawings(prev => [\n//       //   ...prev,\n//       //   {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   }\n//       // ]);\n\n//       // setUndoStack(prev => [...prev, [newShapes]]);\n//       // setRedoStack(prev => [...prev, []]);\n\n//       // setSelectedDrawingIdx(drawings.length); // מצביע לציור החדש\n//       // setDrawings(prev => {\n//       //   const newDrawing = {\n//       //     description: prompt,\n//       //     shapes: newShapes\n//       //   };\n//       //   const newDrawings = [...prev, newDrawing];\n\n//       //   // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//       //   setUndoStack(prevUndo => {\n//       //     const newUndo = [...prevUndo];\n//       //     while (newUndo.length < newDrawings.length) {\n//       //       newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//       //     }\n//       //     return newUndo;\n//       //   });\n\n//       //   setRedoStack(prevRedo => {\n//       //     const newRedo = [...prevRedo];\n//       //     while (newRedo.length < newDrawings.length) {\n//       //       newRedo.push([]);\n//       //     }\n//       //     return newRedo;\n//       //   });\n\n//       //   setSelectedDrawingIdx(newDrawings.length - 1);\n//       //   return newDrawings;\n//       // });\n//       setDrawings(prev => {\n//         const newDrawing = {\n//           description: prompt,\n//           shapes: newShapes\n//         };\n//         const newDrawings = [...prev, newDrawing];\n\n//         // עדכון Undo/Redo והאינדקס רק אחרי שיצרנו את המערך החדש\n//         setUndoStack(prevUndo => {\n//           const newUndo = [...prevUndo];\n//           while (newUndo.length < newDrawings.length) {\n//             newUndo.push([newDrawing.shapes]); // או [[]] אם צריך מצב ריק\n//           }\n//           return newUndo;\n//         });\n\n//         setRedoStack(prevRedo => {\n//           const newRedo = [...prevRedo];\n//           while (newRedo.length < newDrawings.length) {\n//             newRedo.push([]);\n//           }\n//           return newRedo;\n//         });\n\n//         setSelectedDrawingIdx(newDrawings.length - 1);\n\n//         return newDrawings;\n//       });\n\n\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n//       setPrompt(\"\");\n//     } catch (err) {\n//       setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n//     }\n//     setLoading(false);\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"toolbar\">\n//         {/* בחירת קנבס אחד בלבד */}\n//         <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n//           {canvases.map((canvas, idx) => (\n//             <option key={canvas.id ?? idx} value={idx}>{canvas.name}</option>\n//           ))}\n//         </select>\n//         <button\n//           className=\"toolbar-btn orange\"\n//           onClick={handleUndo}\n//           disabled={!undoStack[selectedDrawingIdx] || undoStack[selectedDrawingIdx].length <= 1}\n//         >\n//           אנדו\n//         </button>\n//         <button\n//           className=\"toolbar-btn purple\"\n//           onClick={handleRedo}\n//           disabled={!redoStack[selectedDrawingIdx] || redoStack[selectedDrawingIdx].length === 0}\n//         >\n//           רדו\n//         </button>\n//         {/* כפתור ניקוי ציור */}\n//         <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n//         <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n//       </div>\n//       <div className=\"main-content\">\n//         <div className=\"chat-section\">\n//           <div className=\"chat-title\">היסטוריית שיחה</div>\n//           <div className=\"chat-messages\">\n//             {messages.map((msg, i) => (\n//               <div key={i} className={`chat-msg ${msg.from}`}>\n//                 <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n//               </div>\n//             ))}\n//           </div>\n//           <div className=\"chat-input-row\">\n//             <input\n//               type=\"text\"\n//               value={prompt}\n//               onChange={e => setPrompt(e.target.value)}\n//               placeholder=\"כתוב הודעה לבוט...\"\n//               disabled={loading}\n//               onKeyDown={e => e.key === \"Enter\" && handleSend()}\n//             />\n//             <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n//           </div>\n//         </div>\n//         <div className=\"canvas-section\">\n//           {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n//           <svg width=\"600\" height=\"400\">\n//             {drawings.flatMap((drawing, dIdx) =>\n//               drawing.shapes.map((shape, i) => renderShape(shape, `${dIdx}-${i}`))\n//             )}\n//           </svg>\n//         </div>\n//       </div>\n\n//       {/* דיאלוג שמירה */}\n//       {showSaveDialog && (\n//         <div style={{\n//           position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n//           background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n//         }}>\n//           <div style={{\n//             background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n//           }}>\n//             <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n//             <input\n//               type=\"text\"\n//               value={canvasName}\n//               onChange={e => setCanvasName(e.target.value)}\n//               placeholder=\"הכנס שם לקנבס\"\n//               style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n//               autoFocus\n//             />\n//             <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n//               <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n//               <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction renderShape(shape, i) {\n  const { type, x, y, width, height, color } = shape;\n  switch (type) {\n    case \"Rectangle\":\n      return <rect key={i} x={x} y={y} width={width} height={height} fill={color} stroke=\"#333\" />;\n    case \"Square\":\n      return <rect key={i} x={x} y={y} width={width} height={width} fill={color} stroke=\"#333\" />;\n    case \"Circle\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + width / 2}\n          rx={width / 2}\n          ry={width / 2}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    case \"Ellipse\":\n      return (\n        <ellipse\n          key={i}\n          cx={x + width / 2}\n          cy={y + height / 2}\n          rx={width / 2}\n          ry={height / 2}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    case \"Line\":\n      return <line key={i} x1={x} y1={y} x2={x + width} y2={y + height} stroke={color} strokeWidth=\"3\" />;\n    case \"Triangle\":\n      return (\n        <polygon\n          key={i}\n          points={`\n            ${x + width / 2},${y}\n            ${x},${y + height}\n            ${x + width},${y + height}\n          `}\n          fill={color}\n          stroke=\"#333\"\n        />\n      );\n    default:\n      return null;\n  }\n}\n\nexport default function App() {\n  const [canvases, setCanvases] = useState([\n    {\n      id: null,\n      name: \"קנבס ראשי\",\n      drawings: [],\n      undoStack: [[]],\n      redoStack: [],\n    },\n  ]);\n  const [selectedCanvasIdx, setSelectedCanvasIdx] = useState(0);\n\n  const currentCanvas = canvases[selectedCanvasIdx];\n  const currentDrawings = currentCanvas.drawings;\n  const currentShapes = currentDrawings.flatMap(drawing => drawing.shapes);\n  const currentUndoStack = currentCanvas.undoStack;\n  const currentRedoStack = currentCanvas.redoStack;\n\n  const [prompt, setPrompt] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [canvasName, setCanvasName] = useState(\"\");\n\n  // פונקציה לעדכון מצב הצורות בקנבס וניהול היסטוריית אנדו/רדו\n  const updateCanvasShapes = (newShapes, shouldPushToUndo = true) => {\n    setCanvases(prevCanvases => {\n      const updatedCanvases = [...prevCanvases];\n      const canvasToUpdate = { ...updatedCanvases[selectedCanvasIdx] };\n\n      // שומרים את המצב הנוכחי של כל הצורות לפני השינוי ב-undoStack\n      if (shouldPushToUndo) {\n        // Only push if the shapes actually changed to prevent redundant history states\n        if (JSON.stringify(canvasToUpdate.drawings.flatMap(d => d.shapes)) !== JSON.stringify(newShapes)) {\n          canvasToUpdate.undoStack = [...canvasToUpdate.undoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)];\n          canvasToUpdate.redoStack = []; // מנקים את Redo כשמתבצעת פעולה חדשה\n        }\n      }\n\n      // מעדכנים את הצורות של הציור הראשי בקנבס\n      let newDrawingsArray;\n      if (canvasToUpdate.drawings.length === 0) {\n        newDrawingsArray = [{ description: \"ציור ראשי\", shapes: newShapes }];\n      } else {\n        newDrawingsArray = [...canvasToUpdate.drawings];\n        // אנחנו מעדכנים רק את הצורות של הציור האחרון או יוצרים חדש אם לא קיים\n        // זה שומר על תיאורי הפרומפטים הקודמים\n        const lastDrawingIdx = newDrawingsArray.length - 1;\n        newDrawingsArray[lastDrawingIdx] = {\n          ...newDrawingsArray[lastDrawingIdx],\n          shapes: newShapes // newShapes כאן מתייחס לכלל הצורות בקנבס\n        };\n      }\n\n      canvasToUpdate.drawings = newDrawingsArray;\n      updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n      return updatedCanvases;\n    });\n  };\n\n  // הסרנו את ה-useEffect שגרם ללולאה אינסופית\n  // ניהול מצב הקנבס מתבצע כעת ב-handleSelectCanvas באופן מבוקר יותר.\n\n  function handleClearDrawing() {\n    updateCanvasShapes([], true); // מנקה את כל הצורות ומוסיף ל-undo stack\n  }\n\n  // Undo\n  function handleUndo() {\n    if (currentUndoStack.length <= 1) return;\n\n    setCanvases(prevCanvases => {\n      const updatedCanvases = [...prevCanvases];\n      const canvasToUpdate = { ...updatedCanvases[selectedCanvasIdx] };\n\n      const prevShapesState = canvasToUpdate.undoStack[canvasToUpdate.undoStack.length - 1]; // המצב השמור\n      const newUndoStack = canvasToUpdate.undoStack.slice(0, -1);\n      const newRedoStack = [...canvasToUpdate.redoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)]; // שומרים את המצב הנוכחי עבור Redo\n\n      // מכיוון ש-prevShapesState הוא מערך של צורות, אנו צריכים לטפל איך הוא משפיע על ה-drawings\n      // האסטרטגיה הנפוצה היא שאנדו מחזיר את כלל הצורות במצב הקודם\n      // ולכן אנו נאחד את כלל הצורות למערך drawings יחיד (ציור ראשי)\n      let newDrawingsArray;\n      if (prevShapesState.length === 0 && canvasToUpdate.drawings.length > 1) {\n          // אם המצב הקודם היה ריק ויש לנו כמה ציורים, כנראה ש\"אנדו\" מכוון למצב שלפני יצירתם\n          // או לפני ניקוי כללי - נשמור רק ציור ראשי ריק\n          newDrawingsArray = [{ description: \"ציור ראשי\", shapes: [] }];\n      } else {\n          // נניח שאנדו תמיד משפיע על \"ציור ראשי\" שמאגד את כל הצורות,\n          // כדי לשמור על המבנה של מערך drawings עם תיאורים.\n          // נשמור את כלל הצורות המוחזרות בציור האחרון/ראשי.\n          if (canvasToUpdate.drawings.length === 0) {\n              newDrawingsArray = [{ description: \"ציור ראשי\", shapes: prevShapesState }];\n          } else {\n              newDrawingsArray = [...canvasToUpdate.drawings];\n              newDrawingsArray[newDrawingsArray.length - 1] = {\n                  ...newDrawingsArray[newDrawingsArray.length - 1],\n                  shapes: prevShapesState\n              };\n          }\n      }\n\n      canvasToUpdate.drawings = newDrawingsArray;\n      canvasToUpdate.undoStack = newUndoStack;\n      canvasToUpdate.redoStack = newRedoStack;\n      updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n      return updatedCanvases;\n    });\n  }\n\n  function handleRedo() {\n    if (currentRedoStack.length === 0) return;\n\n    setCanvases(prevCanvases => {\n      const updatedCanvases = [...prevCanvases];\n      const canvasToUpdate = { ...updatedCanvases[selectedCanvasIdx] };\n\n      const [nextShapesState, ...restRedo] = canvasToUpdate.redoStack; // המצב הבא ל-Redo\n      const newUndoStack = [...canvasToUpdate.undoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)]; // שומרים את המצב הנוכחי עבור Undo\n      const newRedoStack = restRedo;\n\n      // בדומה ל-Undo, מעדכנים את הצורות בציור הראשי/אחרון\n      let newDrawingsArray;\n      if (canvasToUpdate.drawings.length === 0) {\n          newDrawingsArray = [{ description: \"ציור ראשי\", shapes: nextShapesState }];\n      } else {\n          newDrawingsArray = [...canvasToUpdate.drawings];\n          newDrawingsArray[newDrawingsArray.length - 1] = {\n              ...newDrawingsArray[newDrawingsArray.length - 1],\n              shapes: nextShapesState\n          };\n      }\n\n      canvasToUpdate.drawings = newDrawingsArray;\n      canvasToUpdate.undoStack = newUndoStack;\n      canvasToUpdate.redoStack = newRedoStack;\n      updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n      return updatedCanvases;\n    });\n  }\n\n  // פתיחת דיאלוג שמירה\n  function handleSave() {\n    setCanvasName(\"\");\n    setShowSaveDialog(true);\n  }\n\n  // שמירת קנבס לשרת (מקבל id מהשרת)\n  async function handleSaveCanvas() {\n    if (!canvasName.trim()) return;\n    setShowSaveDialog(false);\n    try {\n      const response = await fetch(\"/api/drawings/save-canvas\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          title: canvasName,\n          drawings: currentDrawings // שולחים את כל הציורים הקיימים בקנבס הנוכחי\n        }),\n      });\n\n      if (response.ok) {\n        const saved = await response.json();\n        setCanvases(prev => {\n          const newCanvases = [...prev];\n          // אם זה היה הקנבס הראשי ללא ID, מעדכנים אותו.\n          // אחרת, זהו קנבס חדש לגמרי, נוסיף אותו.\n          // בהנחה שהשמירה היא תמיד על הקנבס הנוכחי.\n          if (newCanvases[selectedCanvasIdx].id === null) {\n            newCanvases[selectedCanvasIdx] = {\n              ...newCanvases[selectedCanvasIdx],\n              id: saved.id,\n              name: saved.name,\n              // ה-drawings, undoStack, redoStack כבר מעודכנים ב-state\n            };\n          } else {\n            // אם שמרנו קנבס קיים, יכול להיות שנרצה להציג שהוא עודכן\n            // אך המצב כאן הוא שהכפתור save יוצר קנבס חדש במערך ה-canvases\n            // ואז בוחר בו. אם תרצה לשנות את ההתנהגות לשמירה על קנבס קיים\n            // זה ידרוש לוגיקה נוספת.\n            const newSavedCanvas = {\n                id: saved.id,\n                name: saved.name,\n                drawings: currentDrawings, // המצב הנוכחי של הציורים\n                undoStack: [currentShapes], // מאתחל היסטוריה לנקודת השמירה\n                redoStack: []\n            };\n            newCanvases.push(newSavedCanvas);\n            setSelectedCanvasIdx(newCanvases.length - 1); // עובר לקנבס החדש שנשמר\n          }\n          return newCanvases;\n        });\n\n        alert(\"הקנבס נשמר בהצלחה!\");\n      } else {\n        alert(\"שגיאה בשמירת הקנבס\");\n      }\n    } catch (err) {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  async function handleSelectCanvas(idx) {\n    setSelectedCanvasIdx(idx);\n    setMessages([]); // מנקה היסטוריית שיחה בהחלפת קנבס\n\n    const canvas = canvases[idx];\n\n    // אם זהו קנבס חדש ללא ID (כמו \"קנבס ראשי\" לפני שמירה),\n    // נאפס את מצבו המקומי בתוך ה-canvases array.\n    if (canvas.id === null) {\n      setCanvases(prevCanvases => {\n        const newCanvases = [...prevCanvases];\n        newCanvases[idx] = {\n          ...newCanvases[idx],\n          drawings: [{ description: \"ציור ראשון\", shapes: [] }], // מבטיחים שיש לפחות ציור אחד ריק\n          undoStack: [[]],\n          redoStack: []\n        };\n        return newCanvases;\n      });\n      return; // סיום הפונקציה לאחר עדכון המצב המקומי\n    }\n\n    // אם הקנבס נטען מהשרת (יש לו ID)\n    try {\n      const res = await fetch(`/api/drawings/get/${canvas.id}`);\n      if (res.ok) {\n        const data = await res.json();\n        setCanvases(prevCanvases => {\n          const newCanvases = [...prevCanvases];\n          newCanvases[idx] = {\n            ...newCanvases[idx],\n            drawings: data.drawings, // טוענים את הציורים שהגיעו מהשרת\n            undoStack: [data.drawings.flatMap(d => d.shapes)], // מצב התחלתי לאנדו\n            redoStack: []\n          };\n          return newCanvases;\n        });\n      } else {\n        alert(\"שגיאה בטעינת הקנבס\");\n      }\n    } catch {\n      alert(\"שגיאה בתקשורת עם השרת\");\n    }\n  }\n\n  // שליחת הודעה לשרת\n  async function handleSend() {\n    if (!prompt.trim()) return;\n    setMessages([...messages, { from: \"user\", text: prompt }]);\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/drawings/add-draw\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          prompt,\n          existingDrawings: currentDrawings // שולחים את כל הציורים הקיימים\n        }),\n      });\n\n      if (!response.ok) {\n        setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בשליחת הבקשה לשרת\" }]);\n        setLoading(false);\n        return;\n      }\n\n      const newShapes = await response.json();\n\n      setCanvases(prevCanvases => {\n        const updatedCanvases = [...prevCanvases];\n        const canvasToUpdate = { ...updatedCanvases[selectedCanvasIdx] };\n\n        // שומרים את המצב הנוכחי של כל הצורות לפני הוספת החדשות ל-undoStack\n        canvasToUpdate.undoStack = [...canvasToUpdate.undoStack, canvasToUpdate.drawings.flatMap(d => d.shapes)];\n        canvasToUpdate.redoStack = []; // מנקים את Redo כשמתבצעת פעולה חדשה\n\n        // מוסיפים את הציור החדש (עם התיאור והצורות שלו) למערך ה-drawings של הקנבס הנוכחי\n        canvasToUpdate.drawings = [\n          ...canvasToUpdate.drawings,\n          {\n            description: prompt,\n            shapes: newShapes\n          }\n        ];\n\n        updatedCanvases[selectedCanvasIdx] = canvasToUpdate;\n        return updatedCanvases;\n      });\n\n      setMessages(msgs => [...msgs, { from: \"bot\", text: \"הציור התעדכן בהצלחה!\" }]);\n      setPrompt(\"\");\n    } catch (err) {\n      setMessages(msgs => [...msgs, { from: \"bot\", text: \"שגיאה בתקשורת עם השרת\" }]);\n    }\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"toolbar\">\n        {/* בחירת קנבס אחד בלבד */}\n        <select value={selectedCanvasIdx} onChange={e => handleSelectCanvas(Number(e.target.value))}>\n          {canvases.map((canvas, idx) => (\n            <option key={canvas.id ?? `canvas-${idx}`} value={idx}>{canvas.name}</option>\n          ))}\n        </select>\n        <button\n          className=\"toolbar-btn orange\"\n          onClick={handleUndo}\n          disabled={currentUndoStack.length <= 1}\n        >\n          אנדו\n        </button>\n        <button\n          className=\"toolbar-btn purple\"\n          onClick={handleRedo}\n          disabled={currentRedoStack.length === 0}\n        >\n          רדו\n        </button>\n        {/* כפתור ניקוי ציור */}\n        <button className=\"toolbar-btn red\" onClick={handleClearDrawing}>ניקוי לוח</button>\n\n        <button className=\"toolbar-btn green\" onClick={handleSave}>סייב</button>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"chat-section\">\n          <div className=\"chat-title\">היסטוריית שיחה</div>\n          <div className=\"chat-messages\">\n            {messages.map((msg, i) => (\n              <div key={i} className={`chat-msg ${msg.from}`}>\n                <b>{msg.from === \"user\" ? \"אתה:\" : \"בוט:\"}</b> {msg.text}\n              </div>\n            ))}\n          </div>\n          <div className=\"chat-input-row\">\n            <input\n              type=\"text\"\n              value={prompt}\n              onChange={e => setPrompt(e.target.value)}\n              placeholder=\"כתוב הודעה לבוט...\"\n              disabled={loading}\n              onKeyDown={e => e.key === \"Enter\" && handleSend()}\n            />\n            <button onClick={handleSend} disabled={loading || !prompt.trim()}>שלח</button>\n          </div>\n        </div>\n        <div className=\"canvas-section\">\n          {loading && <div className=\"loading-indicator\">מצייר לך...</div>}\n          <svg width=\"600\" height=\"400\">\n            {currentShapes.map((shape, i) => renderShape(shape, i))}\n          </svg>\n        </div>\n      </div>\n\n      {/* דיאלוג שמירה */}\n      {showSaveDialog && (\n        <div style={{\n          position: \"fixed\", top: 0, left: 0, width: \"100vw\", height: \"100vh\",\n          background: \"rgba(0,0,0,0.3)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", zIndex: 1000\n        }}>\n          <div style={{\n            background: \"#fff\", padding: 30, borderRadius: 10, boxShadow: \"0 2px 12px #0002\", minWidth: 300\n          }}>\n            <div style={{ marginBottom: 10, fontWeight: \"bold\" }}>שם הקנבס:</div>\n            <input\n              type=\"text\"\n              value={canvasName}\n              onChange={e => setCanvasName(e.target.value)}\n              placeholder=\"הכנס שם לקנבס\"\n              style={{ width: \"100%\", padding: 8, borderRadius: 6, border: \"1px solid #ccc\", marginBottom: 16 }}\n              autoFocus\n            />\n            <div style={{ display: \"flex\", gap: 10, justifyContent: \"flex-end\" }}>\n              <button className=\"toolbar-btn green\" onClick={handleSaveCanvas} disabled={!canvasName.trim()}>שמור</button>\n              <button className=\"toolbar-btn orange\" onClick={() => setShowSaveDialog(false)}>ביטול</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,WAAWA,CAACC,KAAK,EAAEC,CAAC,EAAE;EAC7B,MAAM;IAAEC,IAAI;IAAEC,CAAC;IAAEC,CAAC;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGP,KAAK;EAClD,QAAQE,IAAI;IACV,KAAK,WAAW;MACd,oBAAOJ,OAAA;QAAcK,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEA,CAAE;QAACC,KAAK,EAAEA,KAAM;QAACC,MAAM,EAAEA,MAAO;QAACE,IAAI,EAAED,KAAM;QAACE,MAAM,EAAC;MAAM,GAAvER,CAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA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","ignoreList":[]},"metadata":{},"sourceType":"module"}